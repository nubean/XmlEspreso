options {
  IGNORE_CASE = true;
  STATIC = false;
  LOOKAHEAD = 1;
  DEBUG_PARSER = false; 
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(XML10Parser)
package com.nubean.michxml.parser;

import com.nubean.michxml.XMLDocument;
import com.nubean.michxml.XMLNode;
import com.nubean.michbase.DefaultErrorHandler;
import com.nubean.michxml.elem.*;

import org.xml.sax.SAXParseException;

import java.util.*;

public class XML10Parser {
	private XMLDocument doc;
	private Stack sindex = new Stack(); 
	private DefaultErrorHandler errorHandler;
	private ParseException lastException;
	private TokenMgrError tokenError;
	
	public void setErrorHandler(DefaultErrorHandler errorHandler) {
		this.errorHandler = errorHandler;
	}
	private XMLNode getNextXMLNode(XMLNode parent) {
	    int cindex = ( (Integer) sindex.pop()).intValue();
	    sindex.push(new Integer(cindex+1));
		return (parent != null ? parent.child(cindex) : null);
	}
	
	
	
	private void recoverFromError(ParseException e) {
	 lastException = e;
	 try {
		if(errorHandler != null) {
			
			SAXParseException spe = null;
				if(e.currentToken.next != null) {
					spe = new SAXParseException(e.getMessage(), null, null,
		  				e.currentToken.next.beginLine, e.currentToken.next.beginColumn);
				} else {
					spe = new SAXParseException(e.getMessage(), null, null,
		  				e.currentToken.beginLine, e.currentToken.beginColumn);
				}
        		errorHandler.error(spe);
        	
        }
		
	  } catch(Exception sae) {
                	
      }
     
     }
     
     private void recoverFromError(TokenMgrError e) {
      tokenError = e;
	  try {
		if(errorHandler != null) {
			SAXParseException spe = 
			 new SAXParseException(e.getMessage(), null, null,0,0);
        	errorHandler.error(spe);
        }
	  } catch(Exception sae) {
                	
      }
     }
     
    public ParseException getParseException() {
    	return lastException;
    }
    
    public TokenMgrError getTokenMgrError() {
    	return tokenError;
    }
    
    private void switchTo(int state) {
    	token_source.SwitchTo(state);
    	if(token.next != null) {
    		if(token.next.image != null)
    			jj_input_stream.backup(token.next.image.length());
    		token.next = null;
    	}
    }
    public void setTabSize(int size) {
     jj_input_stream.setTabSize(size);
    }
}
PARSER_END(XML10Parser)

TOKEN_MGR_DECLS:
{
}

<DEFAULT> TOKEN :
{
< XMLDeclStart:  "<?xml" >: XMLDeclSect
}

<DEFAULT, PCDataSect> TOKEN :
{
	<PISTART: "<?" >: PISect
}


<XMLDeclSect> TOKEN :
{
   <Encod: "encoding" > : EncodingSect
|  <VERSION:   "version" >
|  <ONEZES:    "'1.0'" >
|  <ONEZED:    "\"1.0\"" >
|  <YESZED:     "\"yes\"">
|  <YESZES:     "'yes'">
|  <NOZED:      "\"no\"">
|  <NOZES:      "'no'">
|  <STANDALONE: "standalone" >
|  <XMLDeclEnd: "?>" >: DEFAULT
}

TOKEN :
{
   < DSO:       "["  >
|  < DSC:       "]"  >
|  < TAGEND:      ">"  > 
|  < EMPTYTAGEND:     "/>" >
|  < MDO:       "<!" >
|  < PC:        "#PCDATA" >
|  < ANY:       "ANY" >
|  < RMD:       "RMD" >
|  < RMD_NONE:  "NONE" >
|  < RMD_ALL:   "ALL" >
|  < RMD_INTERNAL:  "INTERNAL" >
|  < EMPTY:     "EMPTY" >
|  < REQUIRED:  "#REQUIRED" >
|  < IMPLIED:   "#IMPLIED" >
|  < FIXED:     "#FIXED" >
|  < ID:        "ID" >
|  < IDREF:     "IDREF" >
|  < IDREFS:    "IDREFS" >
|  < ENTITY:    "ENTITY" >
|  < ENTITIES:  "ENTITIES" >
|  < NMTOKEN:   "NMTOKEN" >
|  < NMTOKENS:  "NMTOKENS" >
|  < NOTATION:  "NOTATION" >
|  < CDATA:     "CDATA" >
|  < NDATA:     "NDATA" >
|  < IGNORE: "IGNORE" >
|  < INCLUDE: "INCLUDE" >
|  <PUBLIC: "PUBLIC" >
|  <SYSTEM: "SYSTEM" >
}

<DEFAULT, PISect> TOKEN:
{
	< Name: ( <Letter> | "_" | ":") ( <NameChar>)* >
}

<HexSect> TOKEN :
{
  < #Hex: ["0"-"9","a"-"f","A"-"F"] >
| < Hex4: <Hex> <Hex> <Hex> <Hex> >: DEFAULT
}
 
<DEFAULT, XMLDeclSect, EncodingSect> TOKEN :
{
   < Eq:  "=" >
}

<DEFAULT, Enum> TOKEN :
{
   < Digits: ( <Digit> )+ >
|  < #MiscName:  "." | "-" | "_" | ":" >
|  < NameChar:  <Letter> | <Digit> | <MiscName> | <CombiningChar> | <Extender>>
|  <#CombiningChar:
["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] | ["\u0483"-"\u0486"] | ["\u0591"-"\u05A1"] | ["\u05A3"-"\u05B9"] | ["\u05BB"-"\u05BD"] | "\u05BF" | ["\u05C1"-"\u05C2"] | "\u05C4" | ["\u064B"-"\u0652"] | "\u0670" | ["\u06D6"-"\u06DC"] | ["\u06DD"-"\u06DF"] | ["\u06E0"-"\u06E4"] | ["\u06E7"-"\u06E8"] | ["\u06EA"-"\u06ED"] | ["\u0901"-"\u0903"] | "\u093C" | ["\u093E"-"\u094C"] | "\u094D" | ["\u0951"-"\u0954"] | ["\u0962"-"\u0963"] | ["\u0981"-"\u0983"] | "\u09BC" | "\u09BE" | "\u09BF" | ["\u09C0"-"\u09C4"] | ["\u09C7"-"\u09C8"] | ["\u09CB"-"\u09CD"] | "\u09D7" | ["\u09E2"-"\u09E3"] | "\u0A02" | "\u0A3C" | "\u0A3E" | "\u0A3F" | ["\u0A40"-"\u0A42"] | ["\u0A47"-"\u0A48"] | ["\u0A4B"-"\u0A4D"] | ["\u0A70"-"\u0A71"] | ["\u0A81"-"\u0A83"] | "\u0ABC" | ["\u0ABE"-"\u0AC5"] | ["\u0AC7"-"\u0AC9"] | ["\u0ACB"-"\u0ACD"] | ["\u0B01"-"\u0B03"] | "\u0B3C" | ["\u0B3E"-"\u0B43"] | ["\u0B47"-"\u0B48"] | ["\u0B4B"-"\u0B4D"] | ["\u0B56"-"\u0B57"] | ["\u0B82"-"\u0B83"] | ["\u0BBE"-"\u0BC2"] | ["\u0BC6"-"\u0BC8"] | ["\u0BCA"-"\u0BCD"] | "\u0BD7" | ["\u0C01"-"\u0C03"] | ["\u0C3E"-"\u0C44"] | ["\u0C46"-"\u0C48"] | ["\u0C4A"-"\u0C4D"] | ["\u0C55"-"\u0C56"] | ["\u0C82"-"\u0C83"] | ["\u0CBE"-"\u0CC4"] | ["\u0CC6"-"\u0CC8"] | ["\u0CCA"-"\u0CCD"] | ["\u0CD5"-"\u0CD6"] | ["\u0D02"-"\u0D03"] | ["\u0D3E"-"\u0D43"] | ["\u0D46"-"\u0D48"] | ["\u0D4A"-"\u0D4D"] | "\u0D57" | "\u0E31" | ["\u0E34"-"\u0E3A"] | ["\u0E47"-"\u0E4E"] | "\u0EB1" | ["\u0EB4"-"\u0EB9"] | ["\u0EBB"-"\u0EBC"] | ["\u0EC8"-"\u0ECD"] | ["\u0F18"-"\u0F19"] | "\u0F35" | "\u0F37" | "\u0F39" | "\u0F3E" | "\u0F3F" | ["\u0F71"-"\u0F84"] | ["\u0F86"-"\u0F8B"] | ["\u0F90"-"\u0F95"] | "\u0F97" | ["\u0F99"-"\u0FAD"] | ["\u0FB1"-"\u0FB7"] | "\u0FB9" | ["\u20D0"-"\u20DC"] | "\u20E1" | ["\u302A"-"\u302F"] | "\u3099" | "\u309A">
|  <#Extender: "\u00B7" | "\u02D0" | "\u02D1" | "\u0387" | "\u0640" | "\u0E46" | "\u0EC6" | "\u3005" | ["\u3031"-"\u3035"] | ["\u309D"-"\u309E"] | ["\u30FC"-"\u30FE"] >
}

<DEFAULT, XMLDeclSect, Publicid, SysLiteral, Enum, EncodingSect> TOKEN :
{
   < Space: ( <uS> )+ >
|  < #uS: ["\t","\n","\r"," ","\u3000"] >
}

<DEFAULT, SysLiteral, Enum> TOKEN :
{
   <#Digit: ["\u0030"-"\u0039"] | ["\u0660"-"\u0669"] | ["\u06F0"-"\u06F9"] | ["\u0966"-"\u096F"] | ["\u09E6"-"\u09EF"] | ["\u0A66"-"\u0A6F"] | ["\u0AE6"-"\u0AEF"] | ["\u0B66"-"\u0B6F"] | ["\u0BE7"-"\u0BEF"] | ["\u0C66"-"\u0C6F"] | ["\u0CE6"-"\u0CEF"] | ["\u0D66"-"\u0D6F"] | ["\u0E50"-"\u0E59"] | ["\u0ED0"-"\u0ED9"] | ["\u0F20"-"\u0F29"]>
|  < #Letter:  <BaseChar> | <Ideographic> >
|  <#BaseChar:
["\u0041"-"\u005A"] | ["\u0061"-"\u007A"] | ["\u00C0"-"\u00D6"] | ["\u00D8"-"\u00F6"] | ["\u00F8"-"\u00FF"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013E"] | ["\u0141"-"\u0148"] | ["\u014A"-"\u017E"] | ["\u0180"-"\u01C3"] | ["\u01CD"-"\u01F0"] | ["\u01F4"-"\u01F5"] | ["\u01FA"-"\u0217"] | ["\u0250"-"\u02A8"] | ["\u02BB"-"\u02C1"] | "\u0386" | ["\u0388"-"\u038A"] | "\u038C" | ["\u038E"-"\u03A1"] | ["\u03A3"-"\u03CE"] | ["\u03D0"-"\u03D6"] | "\u03DA" | "\u03DC" | "\u03DE" | "\u03E0" | ["\u03E2"-"\u03F3"] | ["\u0401"-"\u040C"] | ["\u040E"-"\u044F"] | ["\u0451"-"\u045C"] | ["\u045E"-"\u0481"] | ["\u0490"-"\u04C4"] | ["\u04C7"-"\u04C8"] | ["\u04CB"-"\u04CC"] | ["\u04D0"-"\u04EB"] | ["\u04EE"-"\u04F5"] | ["\u04F8"-"\u04F9"] | ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05D0"-"\u05EA"] | ["\u05F0"-"\u05F2"] | ["\u0621"-"\u063A"] | ["\u0641"-"\u064A"] | ["\u0671"-"\u06B7"] | ["\u06BA"-"\u06BE"] | ["\u06C0"-"\u06CE"] | ["\u06D0"-"\u06D3"] | "\u06D5" | ["\u06E5"-"\u06E6"] | ["\u0905"-"\u0939"] | "\u093D" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098C"] | ["\u098F"-"\u0990"] | ["\u0993"-"\u09A8"] | ["\u09AA"-"\u09B0"] | "\u09B2" | ["\u09B6"-"\u09B9"] | ["\u09DC"-"\u09DD"] | ["\u09DF"-"\u09E1"] | ["\u09F0"-"\u09F1"] | ["\u0A05"-"\u0A0A"] | ["\u0A0F"-"\u0A10"] | ["\u0A13"-"\u0A28"] | ["\u0A2A"-"\u0A30"] | ["\u0A32"-"\u0A33"] | ["\u0A35"-"\u0A36"] | ["\u0A38"-"\u0A39"] | ["\u0A59"-"\u0A5C"] | "\u0A5E" | ["\u0A72"-"\u0A74"] | ["\u0A85"-"\u0A8B"] | "\u0A8D" | ["\u0A8F"-"\u0A91"] | ["\u0A93"-"\u0AA8"] | ["\u0AAA"-"\u0AB0"] | ["\u0AB2"-"\u0AB3"] | ["\u0AB5"-"\u0AB9"] | "\u0ABD" | "\u0AE0" | ["\u0B05"-"\u0B0C"] | ["\u0B0F"-"\u0B10"] | ["\u0B13"-"\u0B28"] | ["\u0B2A"-"\u0B30"] | ["\u0B32"-"\u0B33"] | ["\u0B36"-"\u0B39"] | "\u0B3D" | ["\u0B5C"-"\u0B5D"] | ["\u0B5F"-"\u0B61"] | ["\u0B85"-"\u0B8A"] | ["\u0B8E"-"\u0B90"] | ["\u0B92"-"\u0B95"] | ["\u0B99"-"\u0B9A"] | "\u0B9C" | ["\u0B9E"-"\u0B9F"] | ["\u0BA3"-"\u0BA4"] | ["\u0BA8"-"\u0BAA"] | ["\u0BAE"-"\u0BB5"] | ["\u0BB7"-"\u0BB9"] | ["\u0C05"-"\u0C0C"] | ["\u0C0E"-"\u0C10"] | ["\u0C12"-"\u0C28"] | ["\u0C2A"-"\u0C33"] | ["\u0C35"-"\u0C39"] | ["\u0C60"-"\u0C61"] | ["\u0C85"-"\u0C8C"] | ["\u0C8E"-"\u0C90"] | ["\u0C92"-"\u0CA8"] | ["\u0CAA"-"\u0CB3"] | ["\u0CB5"-"\u0CB9"] | "\u0CDE" | ["\u0CE0"-"\u0CE1"] | ["\u0D05"-"\u0D0C"] | ["\u0D0E"-"\u0D10"] | ["\u0D12"-"\u0D28"] | ["\u0D2A"-"\u0D39"] | ["\u0D60"-"\u0D61"] | ["\u0E01"-"\u0E2E"] | "\u0E30" | ["\u0E32"-"\u0E33"] | ["\u0E40"-"\u0E45"] | ["\u0E81"-"\u0E82"] | "\u0E84" | ["\u0E87"-"\u0E88"] | "\u0E8A" | "\u0E8D" | ["\u0E94"-"\u0E97"] | ["\u0E99"-"\u0E9F"] | ["\u0EA1"-"\u0EA3"] | "\u0EA5" | "\u0EA7" | ["\u0EAA"-"\u0EAB"] | ["\u0EAD"-"\u0EAE"] | "\u0EB0" | ["\u0EB2"-"\u0EB3"] | "\u0EBD" | ["\u0EC0"-"\u0EC4"] | ["\u0F40"-"\u0F47"] | ["\u0F49"-"\u0F69"] | ["\u10A0"-"\u10C5"] | ["\u10D0"-"\u10F6"] | "\u1100" | ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110B"-"\u110C"] | ["\u110E"-"\u1112"] | "\u113C" | "\u113E" | "\u1140" | "\u114C" | "\u114E" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159" | ["\u115F"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116D"-"\u116E"] | ["\u1172"-"\u1173"] | "\u1175" | "\u119E" | "\u11A8" | "\u11AB" | ["\u11AE"-"\u11AF"] | ["\u11B7"-"\u11B8"] | "\u11BA" | ["\u11BC"-"\u11C2"] | "\u11EB" | "\u11F0" | "\u11F9" | ["\u1E00"-"\u1E9B"] | ["\u1EA0"-"\u1EF9"] | ["\u1F00"-"\u1F15"] | ["\u1F18"-"\u1F1D"] | ["\u1F20"-"\u1F45"] | ["\u1F48"-"\u1F4D"] | ["\u1F50"-"\u1F57"] | "\u1F59" | "\u1F5B" | "\u1F5D" | ["\u1F5F"-"\u1F7D"] | ["\u1F80"-"\u1FB4"] | ["\u1FB6"-"\u1FBC"] | "\u1FBE" | ["\u1FC2"-"\u1FC4"] | ["\u1FC6"-"\u1FCC"] | ["\u1FD0"-"\u1FD3"] | ["\u1FD6"-"\u1FDB"] | ["\u1FE0"-"\u1FEC"] | ["\u1FF2"-"\u1FF4"] | ["\u1FF6"-"\u1FFC"] | "\u2126" | ["\u212A"-"\u212B"] | "\u212E" | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30A1"-"\u30FA"] | ["\u3105"-"\u312C"] | ["\uAC00"-"\uD7A3"] >
|  <#Ideographic: ["\u4E00"-"\u9FA5"] | "\u3007" | ["\u3021"-"\u3029"] >
}

<Publicid> TOKEN :
{
   <PubidLiteral:  (<DQuote> <PubidCharsDQuote> <DQuote>) | (<SQuote> <PubidCharsSQuote> <SQuote>) >: DEFAULT
|  < #DQuote: "\"" >
|  < #SQuote: "'" >
|  < #SpecialCharsDQuote:  ["-","'","(",")","+",",",".","/",":","=","?"] >
|  < #SpecialCharsSQuote:  ["-","(",")","+",",",".","/",":","=","?"] >
|  < #PubidCharDQuote: <uS> | <Letter> | <Digit> | <SpecialCharsDQuote> >
|  < #PubidCharSQuote:  <uS> | <Letter> | <Digit> | <SpecialCharsSQuote> >
|  < #PubidCharsDQuote:  ( <PubidCharDQuote> )* >
|  < #PubidCharsSQuote:  ( <PubidCharSQuote> )* >
}

<DEFAULT, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < Perc: "%" > : DEFAULT
}

<DEFAULT, AttValueSectD, AttValueSectS, EntityValueSectS, EntityValueSectD, Enum> TOKEN :
{
   < SemiColon: ";" > : DEFAULT
}

<DEFAULT, PCDataSect, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < Amp: "&" >: DEFAULT
}

<PCDataSect, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < ChRefHex: "&#x" > : HexSect
|  < ChRefDec: "&#" > : DecSect
}

<DecSect> TOKEN :
{
   < Dec: ( ["0"-"9"] )+ >: DEFAULT
}



<DEFAULT> TOKEN :
{
   < DQuotedDO: "\"" >
}

<AttValueSectD, EntityValueSectD> TOKEN :
{
   < DQuotedDC: "\"" >: DEFAULT
}


<AttValueSectD> TOKEN :
{
   < DQuotedRestAttValueD: ( ~["\"","<", "&"] )+ >
}

<DEFAULT> TOKEN :
{
   < DQuotedSO: "'" >
}

<AttValueSectS, EntityValueSectS> TOKEN :
{
   < DQuotedSC: "'" >: DEFAULT
}

<AttValueSectS> TOKEN :
{
   < DQuotedRestAttValueS: ( ~["'","<", "&"] )+ >
}

<EntityValueSectS> TOKEN :
{
   < DQuotedRestEntityValueS: ( ~["'","%", "&"] )+ >
}

<EntityValueSectD> TOKEN :
{
   < DQuotedRestEntityValueD: ( ~["\"","%", "&"] )+ >
}

<DEFAULT, PCDataSect> TOKEN:
{
   < STAGSTART: "<" > : DEFAULT
|  < ETAGSTART: "</" > : DEFAULT
| < Comment: "<!--" (~["-"])* ("-" (~["-"])+)* "-->" > : DEFAULT
}

<PISect> TOKEN:
{
< PI:  <Name>  ( ~["?"] )* ( ("?" ( ~[">"] )+ )* ( ~["?"] )* )* "?>" > : DEFAULT
}

<PCDataSect> TOKEN:
{
   <CharData:  (~["<","&"] )+ ( ( ( "]" ~["]"] ) | ( "]]" ~[">"] )) (~["<","&"] )* )* >
}

<DEFAULT, PCDataSect> TOKEN :
{
   < CDStart : "<![CDATA[" > : CDataSect
}

<CDataSect> TOKEN :
{
  < CDataContent : ( ~["]"] )+ ( (( "]" ( ~["]"] ) ) | ( "]]" ~[">"] )) ( ~["]"] )* )* >
| < CDEnd : "]]>" > : DEFAULT 
}

<SysLiteral> TOKEN :
{
   < SystemLiteral: <DSystemLiteral> | <SSystemLiteral> > : DEFAULT
|  < #DSystemLiteral: "\"" ( ~["\""] )* "\"" > 
|  < #SSystemLiteral: "'" ( ~["'"] )* "'" >
}

<SysRestSLiteral> TOKEN :
{
   < SSystemRestLiteral: ( ~["'"] )* "'" > : DEFAULT
}

<SysRestDLiteral> TOKEN :
{
   < DSystemRestLiteral: ( ~["\""] )* "\"" > : DEFAULT
}

<EncodingSect> TOKEN :
{
   < QEncoding:  ( "'" <Encoding> "'" ) | ( "\"" <Encoding> "\"" ) > : XMLDeclSect
|  < Encoding: <LatinName> > 
|  < #LatinName :  ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","-",".","_"] )* >
}

Token KeyWords() :
{
  Token tok; 
}
{
(
  tok = <ANY>
| tok = <RMD_ALL>
| tok = <RMD>
| tok = <RMD_NONE>
| tok = <EMPTY>
| tok = <VERSION>
| tok = <RMD_INTERNAL>
| tok = <ID>
| tok = <IDREF>
| tok = <IDREFS>
| tok = <ENTITY>
| tok = <ENTITIES>
| tok = <NMTOKEN>
| tok = <NMTOKENS>
| tok = <NOTATION>
| tok = <CDATA>
| tok = <NDATA>
| tok = <IGNORE>
| tok = <INCLUDE>
| tok = <PUBLIC>
| tok = <SYSTEM>
)
{
  return tok;
}

}

void doctypedecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"<!DOCTYPE"
	{
  		xmlNode = getNextXMLNode(xmlNode);
		
 	 	XMLDocTypeElement dte = new XMLDocTypeElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
		XMLAbstractElement e = new XMLLabelElement(dte, dte.getEndOffset(), "<!DOCTYPE");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
	S(xmlNode, dte)
	(t=<Name> | t=KeyWords())
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	(LOOKAHEAD(2)
	 S(xmlNode, dte)
	 ExternalID(xmlNode, dte)
	)?
	(S(xmlNode, dte))?
	(
	
	"[" 
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), "[");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
		
	intSubset (xmlNode, dte)  
	
	"]" 
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), "]");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
	(S(xmlNode, dte))?
	
	)? 
	
	">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
	
}

void Enumeration(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"("
	{
 		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "(");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
  	}
  	
  	 (S(xmlNode, parent))? 
  	 (t=<Name> | t=KeyWords()) 
  	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
  	 (
  	 
  	 LOOKAHEAD(2) 
  	 (S(xmlNode, parent))? 
  	 "|" 
  	  {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "|");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 
  	 (S(xmlNode, parent))? 
  	 (t=<Name> | t=KeyWords()) 
  	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 
  	 )* 
  	 
  	 (S(xmlNode, parent))? 
  	 ")"
  	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
}
void elementdecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"<!ELEMENT" 
	{
		ElementDeclElement dte = new ElementDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLLabelElement e = new XMLLabelElement(dte, dte.getEndOffset(), "<!ELEMENT");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
 	}
	S(xmlNode, dte)
	(t=<Name> | t=KeyWords()) 
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	S(xmlNode, dte)
	contentspec(xmlNode, dte) 
	(S(xmlNode, dte))? 
	">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
  	
}

void AttlistDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"<!ATTLIST"
	{
		AttlistDeclElement dte = new AttlistDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLLabelElement e = new XMLLabelElement(dte, dte.getEndOffset(), "<!ATTLIST");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
 	}
  	 S(xmlNode, dte)
  	 (t=<Name> | t=KeyWords()) 
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	(
	LOOKAHEAD(2) 
	AttDef(xmlNode, dte)
	)* 
	
	(S(xmlNode, dte))? 
	">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
}

void NotationDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"<!NOTATION"
	{
		NotationDeclElement dte = new NotationDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLLabelElement e = new XMLLabelElement(dte, dte.getEndOffset(),"<!NOTATION");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
 	} 
 	S(xmlNode, dte)
 	(t=<Name> | t=KeyWords()) 
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	S(xmlNode, dte)
	(
		LOOKAHEAD(2147483647) 
		ExternalID(xmlNode, dte) 
		| 
		PublicID(xmlNode, dte)
	) 
	(S(xmlNode, dte))? 
	">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
}
void AttDef(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	S(xmlNode, parent)
	(t=<Name> | t=KeyWords()) 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
	S(xmlNode, parent)
    AttType(xmlNode, parent) 
    S(xmlNode, parent) 
    DefaultDecl(xmlNode, parent)

}
void DefaultDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
String value;
}
{
  t=<REQUIRED>
  {
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
   |  
   t=<IMPLIED> 
   {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
   | 
   (
   (t=<FIXED> 
    {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
   S(xmlNode, parent) 
   )? 
   value = AttrValue()
    {
		e = new XMLLabelElement(parent, parent.getEndOffset(), value);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
   ) 
}


void AttType(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	t=<CDATA>
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<ID> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<IDREF> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<IDREFS> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<ENTITY> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<ENTITIES>
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<NMTOKEN> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| t=<NMTOKENS> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	| EnumeratedType(xmlNode, parent)

}

void EnumeratedType(XMLNode xmlNode, XMLBranchElement parent):
{
}
{
	NotationType(xmlNode, parent) | Enumeration(xmlNode, parent)
}

void NotationType(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	t=<NOTATION>
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}  
	S(xmlNode, parent) 
	 "("
	  {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "(");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	
	 (S(xmlNode, parent))? 
	 (t=<Name> | t=KeyWords()) 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	 (
	 LOOKAHEAD(2)
	 (S(xmlNode, parent))? 
	 "|" 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "|");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	 (S(xmlNode, parent))? 
	 (t=<Name> | t=KeyWords()) 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
	 )* 
	 (S(xmlNode, parent))? 
	 ")" 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	} 
}

void intSubset(XMLNode xmlNode, XMLBranchElement parent):
{}
{
	   (markupdecl(xmlNode, parent) | DeclSep(xmlNode, parent))* 
}

void DeclSep(XMLNode xmlNode, XMLBranchElement parent):
{}
{
	   PEReference(xmlNode, parent) | S(xmlNode, parent) 
}
void markupdecl(XMLNode xmlNode, XMLBranchElement parent):
{}
{
elementdecl(xmlNode, parent) 
| AttlistDecl(xmlNode, parent) 
| EntityDecl(xmlNode, parent) 
| NotationDecl(xmlNode, parent) 
| PI(xmlNode, parent) 
| Comment(xmlNode, parent) 
}
void EntityDecl(XMLNode xmlNode, XMLBranchElement parent):
{}
{
	   LOOKAHEAD(3) GEDecl(xmlNode, parent) 
	   | PEDecl(xmlNode, parent)  
}
void GEDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{

	"<!ENTITY"
	{
		EntityDeclElement dte = new EntityDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLLabelElement e = new XMLLabelElement(dte, dte.getEndOffset(),"<!ENTITY");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
 	} 
	 S(xmlNode, dte)
	 (t=<Name> | t=KeyWords()) 
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	 S(xmlNode, dte)
	  EntityDef(xmlNode, dte) 
	  (S(xmlNode, dte))? 
	">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
  
}
void PEDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	
	"<!ENTITY"
	{
		EntityDeclElement dte = new EntityDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{dte};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLLabelElement e = new XMLLabelElement(dte, dte.getEndOffset(),"<!ENTITY");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
 	} 
	S(xmlNode, dte)
	"%" 
	S(xmlNode, dte)
	(t=<Name> | t=KeyWords()) 
	{
		e = new XMLLabelElement(dte, dte.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
	}
	S(xmlNode, dte)
	 PEDef(xmlNode, dte) 
	 (S(xmlNode, dte))? 
	 ">"
	{
 		e = new XMLLabelElement(dte, dte.getEndOffset(), ">");
 		elems = new XMLAbstractElement[]{e};
 		dte.replace(dte.getElementCount(), 0, elems);
  	}
  	
}

void EntityDef(XMLNode xmlNode, XMLBranchElement parent):
{}
{
	   EntityValue(xmlNode, parent) 
	   | 
	   (ExternalID(xmlNode, parent) (LOOKAHEAD(2) NDataDecl(xmlNode, parent)) ?) 
}

void EntityValue(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	 <DQuotedDO>
	 {switchTo(EntityValueSectD);} 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "\"");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}  
	( 
	  (t=<Name> | t=KeyWords()) 
	  {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	  } 
	  | PEReference(xmlNode, parent)  {switchTo(EntityValueSectD);} 
	  | Reference(xmlNode, parent) {switchTo(EntityValueSectD);} 
	)* 
	<DQuotedDC>
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), "\"");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }  
   |  
   <DQuotedSO>
   {switchTo(EntityValueSectS);}
   {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "'");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	}  
	( 
	   (t=<Name> | t=KeyWords()) 
	  {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	  | PEReference(xmlNode, parent)  {switchTo(EntityValueSectS);}
	  | Reference(xmlNode, parent) {switchTo(EntityValueSectS);}
    )* 
	<DQuotedSC>
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), "'");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
}

void PEDef(XMLNode xmlNode, XMLBranchElement parent):
{}
{
    EntityValue(xmlNode, parent) | ExternalID(xmlNode, parent)  
}
void NDataDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	  S(xmlNode, parent)
	  t=<NDATA> 
	  {
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }  
	  S(xmlNode, parent) 
	  (t=<Name> | t=KeyWords())
	  {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }  
}

void PEReference(XMLNode xmlNode, XMLBranchElement parent):
{
StringBuffer sb = new StringBuffer();
Token t;
}
{
	"%" {sb.append("%");}
	(t=<Name> | t=KeyWords()) {sb.append(t.image);}
	  <SemiColon> {sb.append(";");}
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), sb.toString());
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }  
}

void contentspec(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	t=<EMPTY>
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	 | 
	 t=<ANY> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | LOOKAHEAD(3) Mixed(xmlNode, parent) 
	 | children(xmlNode, parent) 
}
void choice(XMLNode xmlNode, XMLBranchElement parent):
{
}
{
	"(" 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "(");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	(S(xmlNode, parent))? 
	cp(xmlNode, parent) 
	( LOOKAHEAD(2) (S(xmlNode, parent))? 
	"|" 
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), "|");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	(S(xmlNode, parent))? cp(xmlNode, parent) )+ 
	(S(xmlNode, parent))? 
	")"
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
}

void seq(XMLNode xmlNode, XMLBranchElement parent):
{
}
{
	"(" 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "(");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	(S(xmlNode, parent))? 
	cp(xmlNode, parent) 
	( LOOKAHEAD(2)(S(xmlNode, parent))? 
	","
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), ",");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 (S(xmlNode, parent))? 
	 cp(xmlNode, parent) )* (S(xmlNode, parent))? 
	 ")"
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
}

void cp(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	(
	(t=<Name> | t=KeyWords())
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | 
	 LOOKAHEAD(2147483647) choice(xmlNode, parent) 
	 | seq(xmlNode, parent)) (
	 "?" 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "?");
 		 XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | "*" 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "*");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | "+"
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "+");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 )?
}

void children(XMLNode xmlNode, XMLBranchElement parent):
{
}
{
	(LOOKAHEAD(2147483647) choice(xmlNode, parent) 
	| seq(xmlNode, parent)) 
	(
	"?" 
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "?");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | "*" 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "*");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 | "+"
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), "+");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 )?
}

void Mixed(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	"("
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), "(");
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	 (S(xmlNode, parent))? 
	 t=<PC> 
	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	(  LOOKAHEAD(2)(( LOOKAHEAD(2)
	(S(xmlNode, parent))? 
	"|" 
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), "|");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	(S(xmlNode, parent))? 
	(t=<Name> | t=KeyWords())
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	)* (S(xmlNode, parent))? 
	")" "*"
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")*");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	)   
   | ((S(xmlNode, parent))? 
   ")" 
   {
		e = new XMLLabelElement(parent, parent.getEndOffset(), ")");
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
   ) )
	
}
void ExternalID(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	(
	t=<SYSTEM>
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 }
	S(xmlNode, parent)
	{switchTo(SysLiteral);}
	t=<SystemLiteral>  
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	)
   | 
   (
   	t=<PUBLIC>
   	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
   	S(xmlNode, parent)
   	{switchTo(Publicid);}
   	t=<PubidLiteral>
   	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
   	S(xmlNode, parent)
   	{switchTo(SysLiteral);}
   	 t=<SystemLiteral>
   	 {
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
   	) 

}

void PublicID(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	t=<PUBLIC>
	{
		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
	S(xmlNode, parent)
	{switchTo(Publicid);}
	t=<PubidLiteral> 
	{
		e = new XMLLabelElement(parent, parent.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
	 } 
}

void Element(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
XMLElement ee = null;
XMLStartTagElement ste = null;
XMLAbstractElement[] elems = null;
}
{
	{
	   xmlNode = getNextXMLNode(xmlNode);
	   sindex.push(new Integer(0));
	
		ee = new XMLElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		elems = new XMLAbstractElement[]{ee};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
	
	<STAGSTART>
	{
		ste = new XMLStartTagElement(xmlNode, doc, ee, ee.getEndOffset(), 0);
 		elems = new XMLAbstractElement[]{ste};
 		ee.replace(ee.getElementCount(), 0, elems);
	}
	(t=<Name> | t=KeyWords())
	{
		XMLAbstractElement e = new XMLLabelElement(ste, ste.getEndOffset(), "<"+t.image);
 		elems = new XMLAbstractElement[]{e};
 		ste.replace(ste.getElementCount(), 0, elems);
	}
	(LOOKAHEAD(2) S(xmlNode, ste) Attribute(xmlNode, ste))*
	(S(xmlNode, ste))?
	
	(
	(
	t=<EMPTYTAGEND>
	{
		e = new XMLLabelElement(ste, ste.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ste.replace(ste.getElementCount(), 0, elems);
	}
	)
	|
	(
	t=<TAGEND>
	{
		e = new XMLLabelElement(ste, ste.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ste.replace(ste.getElementCount(), 0, elems);
	}
	
	Content(xmlNode, ee)
	ETag(xmlNode, ee)
	)
	)
	
	{sindex.pop();}
	
}

void ETag(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	
	{
		XMLEndTagElement ete = new XMLEndTagElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ete};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
	<ETAGSTART>
	(t=<Name> | t=KeyWords())
	{
		XMLAbstractElement e = new XMLLabelElement(ete, ete.getEndOffset(), "</"+t.image);
 		elems = new XMLAbstractElement[]{e};
 		ete.replace(ete.getElementCount(), 0, elems);
	}
	(S(xmlNode, ete))?
	t=<TAGEND>
	{
		e = new XMLLabelElement(ete, ete.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ete.replace(ete.getElementCount(), 0, elems);
	}
	
}




void CharContent(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	{
		xmlNode = getNextXMLNode(xmlNode);
		
		XMLContentElement ce = new XMLContentElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ce};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
	t=<CharData>
	{
		XMLTextElement te = new XMLTextElement(ce, ce.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{te};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
	
}
void Content(XMLNode xmlNode, XMLBranchElement parent):
{

}
{
	{
      switchTo(PCDataSect);
    }
    (CharContent(xmlNode, parent))?
    (
    	(
    		Element(xmlNode, parent)
    		|
    		Reference(xmlNode, parent)
    		|
    		CDSect(xmlNode, parent)
    		|
    		PI(xmlNode, parent)
    		|
    		Comment(xmlNode, parent)
    	)
    	{
      		switchTo(PCDataSect);
    	}
    	(CharContent(xmlNode, parent))?
    )*
    
    {
      switchTo(DEFAULT);
    }
    
    

}

void CDSect(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
}
{
	{
		XMLCDATAElement ce = new XMLCDATAElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ce};
 		parent.replace(parent.getElementCount(), 0, elems);
	}
	t=<CDStart>
	{
		XMLAbstractElement e = new XMLLabelElement(ce, ce.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
	t=<CDataContent>
	{
		e = new XMLTextElement(ce, ce.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
	t=<CDEnd>
	{
		e = new XMLLabelElement(ce, ce.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
	
	
}
void Reference(XMLNode xmlNode, XMLBranchElement parent):
{
String ref;
}
{
    
	(
	ref=EntityRef()
	|
	ref=CharRef()
	)
	
	{
		XMLContentElement ce = new XMLContentElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ce};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLTextElement te = new XMLTextElement(ce, ce.getEndOffset(),ref);
 		elems = new XMLAbstractElement[]{te};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
	
	
}

void Attribute(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
StringBuffer sb = new StringBuffer();
String value;
}
{
	
	(t=<Name> | t=KeyWords()){sb.append(t.image);}
	(t=<Space>{sb.append(t.image);})?
	t=<Eq>{sb.append(t.image);}
	(t=<Space>{sb.append(t.image);})?
	value=AttrValue()
	{
	    xmlNode = getNextXMLNode(xmlNode);
		
		int vlen = value.length();
		
		XMLAttributeElement ae = new XMLAttributeElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ae};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
 		XMLAbstractElement e = new XMLLabelElement(ae, ae.getEndOffset(), sb.toString()+value.substring(0,1));
 		elems = new XMLAbstractElement[]{e};
 		ae.replace(ae.getElementCount(), 0, elems);
 		
 		if(vlen > 2) {
 			e = new XMLValueElement(ae, ae.getEndOffset(), value.substring(1,vlen -1));
 			elems = new XMLAbstractElement[]{e};
 			ae.replace(ae.getElementCount(), 0, elems);
 		}
 		
 		e = new XMLLabelElement(ae, ae.getEndOffset(), value.substring(vlen-1));
 		elems = new XMLAbstractElement[]{e};
 		ae.replace(ae.getElementCount(), 0, elems);
	}
	
	
}

String AttrValue() :
{
  StringBuffer lit =new StringBuffer();
  Token tok;
  String ref;
}
{
  (
    tok=<DQuotedDO>
    {
    	lit.append(tok.image);
    	switchTo(AttValueSectD);
    }
    (
      ref=EntityRef() 
      {
      	 lit.append(ref);
      	 switchTo(AttValueSectD);
      }
    | ref = CharRef()
      {
        lit.append(ref);
        switchTo(AttValueSectD);
      }
    | tok = <DQuotedRestAttValueD>
      {
        lit.append(tok.image);
        switchTo(AttValueSectD);
      }
    | tok = <SemiColon>
      {
        lit.append(tok.image);
        switchTo(AttValueSectD);
      }
    | tok = <Perc>
      {
        lit.append(tok.image);
        switchTo(AttValueSectD);
      }
    )*
    tok=<DQuotedDC> 
    {
      lit.append(tok.image);
      return lit.toString();
    }
  )
  |
  (
    tok=<DQuotedSO>
    {
    	lit.append(tok.image);
    	switchTo(AttValueSectS);
    }
    (
      ref=EntityRef()
      {
      	 lit.append(ref);
      	 switchTo(AttValueSectS);
      }
    | ref = CharRef()
      {
        lit.append(ref);
        switchTo(AttValueSectS);
      }
    | tok = <DQuotedRestAttValueS>
      {
        lit.append(tok.image);
        switchTo(AttValueSectS);
      }
    | tok = <SemiColon>
      {
        lit.append(tok.image);
        switchTo(AttValueSectS);
      }
    | tok = <Perc>
      {
        lit.append(tok.image);
        switchTo(AttValueSectS);
      }
    )*
    tok=<DQuotedSC> 
    {
      lit.append(tok.image);
      return lit.toString();
    }
  )
}

String EntityRef():
{
StringBuffer sb = new StringBuffer();
Token t;
}
{
	t=<Amp>{sb.append(t.image);}
	(t=<Name> | t=KeyWords()){sb.append(t.image);}
	<SemiColon>{sb.append(";");}
	{return sb.toString();}
}

String CharRef() :
{
  Token t;
  StringBuffer sb = new StringBuffer();
}
{
  (
    t=<ChRefHex>{sb.append(t.image);}
    t=<Hex4>{sb.append(t.image);}
    <SemiColon>{sb.append(";");}
    {
      return sb.toString();
    }
  )
  |
  (
    t=<ChRefDec>{sb.append(t.image);}
    t=<Dec>{sb.append(t.image);}
    <SemiColon>{sb.append(";");}
    {
      return sb.toString();
    }
  )
}

void PI(XMLNode xmlNode, XMLBranchElement parent) :
{
Token t;
}
{
	<PISTART>
	t=<PI>
	{
		xmlNode = getNextXMLNode(xmlNode);

		XMLProcInstrElement pie = new XMLProcInstrElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{pie};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
		XMLAbstractElement e = new XMLLabelElement(pie, pie.getEndOffset(), "<?");
 		elems = new XMLAbstractElement[]{e};
 		pie.replace(pie.getElementCount(), 0, elems);
 		
 		String pi = t.image.substring(0, t.image.length()-2);
 		e = new XMLProcInstrDataElement(pie, pie.getEndOffset(), pi);
 		elems = new XMLAbstractElement[]{e};
 		pie.replace(pie.getElementCount(), 0, elems);
 		
 		e = new XMLLabelElement(pie, pie.getEndOffset(), "?>");
 		elems = new XMLAbstractElement[]{e};
 		pie.replace(pie.getElementCount(), 0, elems);
	}
}


void Comment(XMLNode xmlNode, XMLBranchElement parent) :
{
Token t;
}
{
	t=<Comment>
	{
		xmlNode = getNextXMLNode(xmlNode);
		
		XMLCommentElement ce = new XMLCommentElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{ce};
 		parent.replace(parent.getElementCount(), 0, elems);
 		
		XMLAbstractElement e = new XMLLabelElement(ce, ce.getEndOffset(), "<!--");
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
 		
 		String comment = t.image.substring(4, t.image.length()-3);
 		e = new XMLCommentDataElement(ce, ce.getEndOffset(), comment);
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
 		
 		e = new XMLLabelElement(ce, ce.getEndOffset(), "-->");
 		elems = new XMLAbstractElement[]{e};
 		ce.replace(ce.getElementCount(), 0, elems);
	}
}
void Misc(XMLNode xmlNode, XMLBranchElement parent) :
{
}
{

  		PI(xmlNode, parent)
		| Comment(xmlNode, parent) 
		| S(xmlNode, parent) 
	
}

void S(XMLNode xmlNode, XMLBranchElement parent) :
{
Token t;
}
{
	
	t=<Space>
	{
   		XMLAbstractElement e = new XMLWhiteSpaceElement(parent, parent.getEndOffset(), t.image);
 		XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
  	}
  	
}


void XMLDecl(XMLNode xmlNode, XMLBranchElement parent):
{
XMLDeclElement xde = new XMLDeclElement(xmlNode, doc, parent, parent.getEndOffset(), 0);
Token t;
}
{
	
	{
		XMLAbstractElement[] elems = new XMLAbstractElement[]{xde};
		parent.replace(parent.getElementCount(), 0, elems);
	}
	
 	t=<XMLDeclStart>
 	{
 		XMLAbstractElement e = new XMLLabelElement(xde, xde.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		xde.replace(xde.getElementCount(), 0, elems);
 	}
 	
 	VersionInfo(xmlNode, xde)
 	(LOOKAHEAD(2)EncodingDecl(xmlNode, xde))?
 	(LOOKAHEAD(2)SDDecl(xmlNode, xde))?
 	(S(xmlNode, xde))?
 	t=<XMLDeclEnd>
 	{
 		e = new XMLLabelElement(xde, xde.getEndOffset(), t.image);
 		elems = new XMLAbstractElement[]{e};
 		xde.replace(xde.getElementCount(), 0, elems);
 	}
 	
 	
}

void VersionInfo(XMLNode xmlNode, XMLBranchElement parent) :
{
Token t;
StringBuffer sb = new StringBuffer();
}
{
 
  S(xmlNode, parent)
  t=<VERSION> {sb.append(t.image);}
  (t=<Space>{sb.append(t.image);})?
   t=<Eq>{sb.append(t.image);}
   (t=<Space>{sb.append(t.image);})?
  (t=<ONEZED> {sb.append(t.image);} | t=<ONEZES> {sb.append(t.image);})
   {
   	XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), sb.toString());
 	XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 	parent.replace(parent.getElementCount(), 0, elems);
 	sb.setLength(0);
  }
  
  
}

void EncodingDecl(XMLNode xmlNode, XMLBranchElement parent) :
{
Token t;
StringBuffer sb = new StringBuffer();
}
{
 
  S(xmlNode, parent)
  t=<Encod> {sb.append(t.image);}
  ( t=<Space> {sb.append(t.image);})?
  ( t=<Eq> {sb.append(t.image);})
  ( t=<Space> {sb.append(t.image);})?
  t=<QEncoding> {sb.append(t.image);}
  {
   	XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), sb.toString());
 	XMLAbstractElement[] elems = new XMLAbstractElement[]{e};
 	parent.replace(parent.getElementCount(), 0, elems);
 	sb.setLength(0);
  } 
  
}

void SDDecl(XMLNode xmlNode, XMLBranchElement parent):
{
Token t;
StringBuffer sb = new StringBuffer();
}
{

	S(xmlNode, parent)
	t=<STANDALONE> {sb.append(t.image);}
  	( t=<Space> {sb.append(t.image);})?
	( t=<Eq> {sb.append(t.image);})
	( t=<Space> {sb.append(t.image);})?
	(t=<YESZES>{sb.append(t.image);} | t=<NOZES> {sb.append(t.image);} | t=<YESZED> {sb.append(t.image);}| t=<NOZED> {sb.append(t.image);})
	{
   		XMLAbstractElement e = new XMLLabelElement(parent, parent.getEndOffset(), sb.toString());
 		XMLAbstractElement[]elems = new XMLAbstractElement[]{e};
 		parent.replace(parent.getElementCount(), 0, elems);
 		sb.setLength(0);
  	}
  	
}

XMLDocumentElement Document(XMLDocument doc, XMLNode root):
{
this.doc = doc;
XMLDocumentElement de = new XMLDocumentElement(root, doc);
}
{
	try {
		{sindex.push(new Integer(0));}
		
		(XMLDecl(root, de))?
		(Misc(root, de))*
		(
			doctypedecl(root, de)
			(Misc(root, de))*
	
		)?
		
		Element(root, de)
		(Misc(root, de))*
		{sindex.pop();}
	} catch(TokenMgrError e) {
		recoverFromError(e);
	} catch(ParseException e) {
		recoverFromError(e);
	}
	{return de;}
	
}
