/* Generated By:JavaCC: Do not edit this line. XML10ParserTokenManager.java */
/*
The MIT License (MIT)

Copyright (c) 2015 NuBean LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package com.nubean.michxml.parser;
import com.nubean.michxml.XMLDocument;
import com.nubean.michxml.XMLNode;
import com.nubean.michbase.DefaultErrorHandler;
import com.nubean.michxml.elem.*;
import org.xml.sax.SAXParseException;
import java.util.*;

/** Token Manager. */
public class XML10ParserTokenManager implements XML10ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_13()
{
   return jjMoveNfa_13(0, 0);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 71;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1)
{
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_10()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 73);
      case 37:
         return jjStopAtPos(0, 66);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_10(0x60L);
      case 59:
         return jjStartNfaWithStates_10(0, 67, 0);
      default :
         return jjMoveNfa_10(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_10(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_10(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_10(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_10(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, 0L, active1);
}
private int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff9bffffffffL & l) == 0L)
                     break;
                  kind = 79;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 79;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(1, 0);
}
static final long[] jjbitVec3 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 4:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 39 && kind > 88)
                     kind = 88;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjAddStates(0, 1);
                  break;
               case 5:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec6 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec7 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffffc7f7fffL
};
static final long[] jjbitVec9 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec10 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec11 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec12 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec13 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec14 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec15 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec16 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec18 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec20 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec21 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec22 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec23 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec24 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec25 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec27 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec28 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec29 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec30 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffffc7f7fffL
};
static final long[] jjbitVec31 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec32 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec33 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec34 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec35 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec36 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec37 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec38 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec40 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec41 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec42 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar != 58)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(4, 8);
                  break;
               case 1:
                  if ((0x7ff600000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x7ff600000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 3:
                  if (curChar == 63)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 5:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 6:
                  if (curChar == 62 && kind > 83)
                     kind = 83;
                  break;
               case 7:
                  if (curChar == 63)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(20, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(4, 8);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 4:
                  jjCheckNAddStates(13, 16);
                  break;
               case 5:
                  jjCheckNAddStates(17, 19);
                  break;
               case 8:
                  jjCheckNAddStates(20, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAddStates(4, 8);
                  break;
               case 1:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(9, 12);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(13, 16);
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(17, 19);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(20, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0xcL) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 37:
         return jjStartNfaWithStates_12(0, 66, 0);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_12(0x60L);
      case 39:
         return jjStopAtPos(0, 76);
      case 59:
         return jjStartNfaWithStates_12(0, 67, 0);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_12(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_12(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_12(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_12(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_12(1, 0L, active1);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffff3fffffffffL & l) == 0L)
                     break;
                  kind = 77;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 77;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4L) != 0L || (active1 & 0x230000L) != 0L)
            return 8;
         return -1;
      case 1:
         if ((active1 & 0x200000L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x60L);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_1(0x4L, 0x220000L);
      default :
         return jjMoveNfa_1(9, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x200000L);
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20L);
      case 47:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 63:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa3_1(active1, 0x200000L);
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_1(active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_1(active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_1(active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_1(active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_1(active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_1(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(8, 85);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, 0L, active1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 17;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0xefffffbfffffffffL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     jjCheckNAddStates(24, 26);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 0:
                  if (curChar == 45)
                     jjCheckNAddStates(27, 29);
                  break;
               case 1:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 2:
                  if (curChar == 45)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 4:
                  if (curChar == 62 && kind > 82)
                     kind = 82;
                  break;
               case 5:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 8:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 10:
                  if ((0xefffffbfffffffffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(24, 26);
                  break;
               case 12:
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               case 14:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               case 16:
                  if ((0xefffffbfffffffffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 10:
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(24, 26);
                  break;
               case 1:
                  jjCheckNAddStates(27, 29);
                  break;
               case 3:
                  jjCheckNAddStates(30, 32);
                  break;
               case 11:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0xffffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               case 13:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
               case 16:
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               case 15:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
               case 10:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(24, 26);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(27, 29);
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(30, 32);
                  break;
               case 12:
               case 14:
               case 16:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 84)
                     kind = 84;
                  jjCheckNAddStates(33, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 17 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0, long active1)
{
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_14()
{
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa1_14(0x800000L);
      default :
         return jjMoveNfa_14(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 93:
         return jjMoveStringLiteralDfa2_14(active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_14(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_14(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_14(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(2, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_14(1, 0L, active1);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(36, 38);
                  break;
               case 2:
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(39, 41);
                  break;
               case 4:
                  if ((0xbfffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(39, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(36, 38);
                  break;
               case 1:
                  if (curChar == 93)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0xffffffffdfffffffL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(39, 41);
                  break;
               case 3:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(39, 41);
                  break;
               case 5:
                  if (curChar == 93)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(36, 38);
                  break;
               case 2:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAddStates(39, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0, long active1)
{
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_9()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 66);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_9(0x60L);
      case 39:
         return jjStopAtPos(0, 76);
      case 59:
         return jjStartNfaWithStates_9(0, 67, 0);
      default :
         return jjMoveNfa_9(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_9(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_9(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_9(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_9(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_9(1, 0L, active1);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffff1fffffffffL & l) == 0L)
                     break;
                  kind = 78;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 78;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 66);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_6(0x60L);
      case 59:
         return jjStopAtPos(0, 67);
      default :
         return jjMoveNfa_6(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_6(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_6(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_6(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_6(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, 0L, active1);
}
static final long[] jjbitVec43 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec44 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec45 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec46 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec47 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec48 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec49 = {
   0x3ff00000000L, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7ff600000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(2);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 51;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     kind = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(0);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(2);
                  }
                  break;
               case 0:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fff1f80000L) != 0L)
         {
            jjmatchedKind = 42;
            return 1;
         }
         if ((active0 & 0x20006L) != 0L || (active1 & 0xf100230000L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x20000L) != 0L || (active1 & 0xf100200000L) != 0L)
            return 12;
         if ((active0 & 0x3ff81f80000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x70000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x3ffe1a00000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x580000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x3ffe1800000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x200000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x3061000000L) != 0L)
            return 1;
         if ((active0 & 0x3cf80800000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x340c0000000L) != 0L)
            return 1;
         if ((active0 & 0x8f00800000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x8600000000L) != 0L)
            return 1;
         if ((active0 & 0x900800000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 42;
               jjmatchedPos = 6;
            }
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0xd00800000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 72);
      case 35:
         return jjMoveStringLiteralDfa1_0(0xe040000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 66);
      case 38:
         return jjStopAtPos(0, 68);
      case 39:
         return jjStopAtPos(0, 75);
      case 40:
         return jjStopAtPos(0, 97);
      case 41:
         return jjStopAtPos(0, 99);
      case 42:
         return jjStopAtPos(0, 106);
      case 43:
         return jjStopAtPos(0, 107);
      case 44:
         return jjStopAtPos(0, 104);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 67);
      case 60:
         jjmatchedKind = 80;
         return jjMoveStringLiteralDfa1_0(0x20006L, 0xf100220000L);
      case 61:
         return jjStopAtPos(0, 45);
      case 62:
         return jjStopAtPos(0, 15);
      case 63:
         return jjStopAtPos(0, 105);
      case 91:
         return jjStopAtPos(0, 13);
      case 93:
         return jjStopAtPos(0, 14);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x480000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x181000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc070800000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2e00200000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 98);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 33:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf100200000L);
      case 47:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      case 62:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 63:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x3060000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x601100000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8180880000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x800200000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x2000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(2, 20, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x9000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 1);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000200000L, active1, 0x4000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0xf80800000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x60800000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x18000000000L, active1, 0x1000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4600000000L, active1, 0x4100000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x23001000000L, active1, 0x2000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x20008000000L, active1, 0x1000000000L);
      case 70:
      case 102:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x600000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(4, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000800000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x980000000L, active1, 0xe000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8002000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000200000L);
      case 67:
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 1);
         break;
      case 68:
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 38, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x600000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x906000000L, active1, 0x8000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000L);
      case 77:
      case 109:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000L, active1, 0x100000000L);
      case 89:
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 31, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(6, 18);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x104000000L, active1, 0x1000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0xc000200000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 68:
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(7, 26);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 23, 1);
         break;
      case 78:
      case 110:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000L);
      case 83:
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(7, 32, 1);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000000L);
      case 89:
      case 121:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(7, 103);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 91:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(8, 85);
         break;
      case 68:
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(8, 25);
         break;
      case 69:
      case 101:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(8, 96);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000000L);
      case 84:
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 100);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStopAtPos(8, 101);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(9, 102);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7ff600000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(4);
                  }
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(2);
                  }
                  else if (curChar == 58)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x7ff600000000000L & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x7ff600000000000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 4:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAddStates(42, 44);
                  break;
               case 6:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 7:
                  if (curChar == 45)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0xffffdfffffffffffL & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 9:
                  if (curChar == 62 && kind > 82)
                     kind = 82;
                  break;
               case 10:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 6:
                  jjCheckNAddStates(42, 44);
                  break;
               case 8:
                  jjCheckNAddStates(45, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(1);
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(2);
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(4);
                  }
                  break;
               case 1:
                  if (!jjCanMove_3(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (!jjCanMove_4(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(42, 44);
                  break;
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(45, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   return jjMoveNfa_4(0, 0);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x7e0000007eL & l) != 0L && kind > 44)
                     kind = 44;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_16()
{
   return jjMoveNfa_16(2, 0);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 34)
                  {
                     if (kind > 92)
                        kind = 92;
                  }
                  break;
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 34)
                     kind = 92;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 61:
         return jjStopAtPos(0, 45);
      default :
         return jjMoveNfa_5(1, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 11;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(48, 49);
                  break;
               case 4:
                  if (curChar == 39 && kind > 93)
                     kind = 93;
                  break;
               case 5:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(50, 51);
                  break;
               case 8:
                  if (curChar == 34 && kind > 93)
                     kind = 93;
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(10);
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  jjCheckNAdd(10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 11 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_15()
{
   return jjMoveNfa_15(2, 0);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 39)
                  {
                     if (kind > 91)
                        kind = 91;
                  }
                  break;
               case 0:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar == 39)
                     kind = 91;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(0, 1);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa1_2(0x2c0L);
      case 39:
         return jjMoveStringLiteralDfa1_2(0x520L);
      case 61:
         return jjStopAtPos(0, 45);
      case 63:
         return jjMoveStringLiteralDfa1_2(0x1000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_2(0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_2(0x800L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_2(0x10L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa2_2(active0, 0x60L);
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x10L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x608L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_2(active0, 0x800L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_2(active0, 0x180L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa3_2(active0, 0x60L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_2(active0, 0x8L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x180L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_2(active0, 0x600L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_2(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(3, 9);
         break;
      case 39:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(3, 10);
         break;
      case 48:
         return jjMoveStringLiteralDfa4_2(active0, 0x60L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_2(active0, 0x190L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(4, 6);
         else if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(4, 7);
         break;
      case 39:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(4, 5);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_2(active0, 0x808L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_2(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_2(active0, 0x800L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x8L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_2(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_2(active0, 0x800L);
      case 78:
      case 110:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(6, 4);
         return jjMoveStringLiteralDfa7_2(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(7, 3);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_2(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_2(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_2(7, active0);
}
private int jjMoveStringLiteralDfa9_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(9, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_2(8, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 51;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0xcL) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 73);
      case 37:
         return jjStartNfaWithStates_11(0, 66, 0);
      case 38:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_11(0x60L);
      case 59:
         return jjStartNfaWithStates_11(0, 67, 0);
      default :
         return jjMoveNfa_11(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_11(active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_11(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_11(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_11(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 88:
      case 120:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_11(1, 0L, active1);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xefffffbbffffffffL & l) == 0L)
                     break;
                  kind = 74;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 74;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(1, 0);
}
static final long[] jjbitVec50 = {
   0x7fffffe00000000L, 0xfffe03ff000007feL, 0x7cffffffffffffffL, 0x3ff0060002f7fffL
};
static final long[] jjbitVec51 = {
   0x23ffffffffffffe0L, 0xffc3ff000000L, 0x3c5fdfffff99fe0L, 0x3ffc3b0000000L
};
static final long[] jjbitVec52 = {
   0x36dfdfffff987e0L, 0x1cffc05e000000L, 0x23edfdfffffbafe0L, 0xffc100000000L
};
static final long[] jjbitVec53 = {
   0x23cdfdfffff99fe0L, 0xffc3b0000000L, 0x3bfc718d63dc7e0L, 0xff8000000000L
};
static final long[] jjbitVec54 = {
   0x3effdfffffddfe0L, 0xffc300000000L, 0x3effdfffffddfe0L, 0xffc340000000L
};
static final long[] jjbitVec55 = {
   0x3fffdfffffddfe0L, 0xffc300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec56 = {
   0xd7ffffffffffeL, 0x3ff003fL, 0x200d6caefef02596L, 0x3ff001fL
};
static final long[] jjbitVec57 = {
   0x3ff00000000L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec58 = {
   0x3fe00000081L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xa7fffb8100002600L & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 3:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 4:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xa7fffb0100002600L & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 5:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 5, 6, 1, 2, 3, 7, 8, 2, 3, 7, 8, 3, 4, 5, 
   7, 3, 5, 7, 3, 5, 7, 8, 10, 11, 15, 1, 2, 6, 2, 3, 
   6, 11, 15, 16, 0, 1, 5, 1, 5, 2, 6, 7, 11, 7, 8, 11, 
   3, 4, 7, 8, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec41[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec42[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec46[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec47[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec48[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec49[i2] & l2) != 0L);
      default :
         if ((jjbitVec43[i1] & l1) != 0L)
            if ((jjbitVec44[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec53[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec54[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec56[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec57[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec58[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec27[i2] & l2) != 0L);
      default :
         if ((jjbitVec4[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\74\77", null, null, "\47\61\56\60\47", "\42\61\56\60\42", null, 
null, null, null, null, "\77\76", "\133", "\135", "\76", "\57\76", "\74\41", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\75", null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\45", "\73", "\46", null, "\46\43", null, "\42", 
"\42", null, "\47", "\47", null, null, null, "\74", "\74\57", null, null, null, null, 
null, "\135\135\76", null, null, null, null, null, null, null, null, null, "\50", 
"\174", "\51", null, null, null, null, "\54", "\77", "\52", "\53", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "PCDataSect",
   "XMLDeclSect",
   "PISect",
   "HexSect",
   "EncodingSect",
   "Enum",
   "Publicid",
   "SysLiteral",
   "EntityValueSectS",
   "EntityValueSectD",
   "AttValueSectD",
   "AttValueSectS",
   "DecSect",
   "CDataSect",
   "SysRestSLiteral",
   "SysRestDLiteral",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 2, 3, 5, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 4, 13, 0, -1, 0, -1, 
   -1, 0, -1, -1, -1, 0, 0, 0, 0, -1, 14, -1, 0, 0, -1, -1, 0, 0, 2, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[17];
private final int[] jjstateSet = new int[34];
protected char curChar;
/** Constructor. */
public XML10ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public XML10ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 17; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 17 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
     case 16:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_16();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
