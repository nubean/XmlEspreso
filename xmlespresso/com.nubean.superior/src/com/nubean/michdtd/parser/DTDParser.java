/* Generated By:JJTree&JavaCC: Do not edit this line. DTDParser.java */
/*
The MIT License (MIT)

Copyright (c) 2015 NuBean LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package com.nubean.michdtd.parser;

import javax.swing.text.Document;
import org.xml.sax.SAXParseException;

import com.nubean.michbase.DefaultErrorHandler;

public class DTDParser/*@bgen(jjtree)*/implements DTDParserTreeConstants, DTDParserConstants {/*@bgen(jjtree)*/
  protected JJTDTDParserState jjtree = new JJTDTDParserState();private Document document;
        private DefaultErrorHandler errorHandler;
        private ParseException lastException;
        private TokenMgrError tokenError;

        public void setErrorHandler(DefaultErrorHandler errorHandler) {
                this.errorHandler = errorHandler;
        }

        private void recoverFromError(ParseException e) {
         lastException = e;
         try {
                if(errorHandler != null) {

                        SAXParseException spe = null;
                                if(e.currentToken.next != null) {
                                        spe = new SAXParseException(e.getMessage(), null, null,
                                                e.currentToken.next.beginLine, e.currentToken.next.beginColumn);
                                } else {
                                        spe = new SAXParseException(e.getMessage(), null, null,
                                                e.currentToken.beginLine, e.currentToken.beginColumn);
                                }
                        errorHandler.error(spe);

        }

          } catch(Exception sae) {

      }

     }

     private void recoverFromError(TokenMgrError e) {
      tokenError = e;
          try {
                if(errorHandler != null) {
                        SAXParseException spe =
                         new SAXParseException(e.getMessage(), null, null,0,0);
                errorHandler.error(spe);
        }
          } catch(Exception sae) {

      }
     }

        private void jjtreeOpenNodeScope(SimpleNode sn) {
      sn.setFirstToken(getToken(1));
    }

    private  void jjtreeCloseNodeScope(SimpleNode sn){
      sn.setLastToken(getToken(0));
    }

    public Document getDocument() {
        return  document;
    }

    public void setDocument(Document document) {
        this.document = document;
    }

    public ParseException getParseException() {
        return lastException;
    }

    public TokenMgrError getTokenMgrError() {
        return tokenError;
    }

     private void switchTo(int state) {
        token_source.SwitchTo(state);
        if(token.next != null) {
                if(token.next.image != null)
                        jj_input_stream.backup(token.next.image.length());
                token.next = null;
        }
    }

    public void setTabSize(int size) {
     jj_input_stream.setTabSize(size);
    }

  final public void Name() throws ParseException {
 /*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(this, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Name:
        jj_consume_token(Name);
        break;
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
        KeyWords();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public Token KeyWords() throws ParseException {
 /*@bgen(jjtree) KeyWords */
  ASTKeyWords jjtn000 = new ASTKeyWords(this, JJTKEYWORDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);Token tok;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
        tok = jj_consume_token(ANY);
        break;
      case EMPTY:
        tok = jj_consume_token(EMPTY);
        break;
      case VERSION:
        tok = jj_consume_token(VERSION);
        break;
      case ID:
        tok = jj_consume_token(ID);
        break;
      case IDREF:
        tok = jj_consume_token(IDREF);
        break;
      case IDREFS:
        tok = jj_consume_token(IDREFS);
        break;
      case ENTITY:
        tok = jj_consume_token(ENTITY);
        break;
      case NOTATION:
        tok = jj_consume_token(NOTATION);
        break;
      case ENTITIES:
        tok = jj_consume_token(ENTITIES);
        break;
      case NMTOKEN:
        tok = jj_consume_token(NMTOKEN);
        break;
      case NMTOKENS:
        tok = jj_consume_token(NMTOKENS);
        break;
      case CDATA:
        tok = jj_consume_token(CDATA);
        break;
      case NDATA:
        tok = jj_consume_token(NDATA);
        break;
      case IGNORE:
        tok = jj_consume_token(IGNORE);
        break;
      case INCLUDE:
        tok = jj_consume_token(INCLUDE);
        break;
      case PUBLIC:
        tok = jj_consume_token(PUBLIC);
        break;
      case SYSTEM:
        tok = jj_consume_token(SYSTEM);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtreeCloseNodeScope(jjtn000);
  {if (true) return tok;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTdtd dtd() throws ParseException {
 /*@bgen(jjtree) dtd */
  ASTdtd jjtn000 = new ASTdtd(this, JJTDTD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
                lastException = null;
                tokenError = null;
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case XMLDeclStart:
          TextDecl();
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        extSubsetDecl();
      } catch (ParseException e) {
                recoverFromError(e);
      } catch (TokenMgrError te) {
                recoverFromError(te);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void TextDecl() throws ParseException {
 /*@bgen(jjtree) TextDecl */
  ASTTextDecl jjtn000 = new ASTTextDecl(this, JJTTEXTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(XMLDeclStart);
      VersionInfo();
      if (jj_2_1(2)) {
        EncodingDecl();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(XMLDeclEnd);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void VersionInfo() throws ParseException {
    jj_consume_token(Space);
    jj_consume_token(VERSION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(Eq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ONEZED:
      jj_consume_token(ONEZED);
      break;
    case ONEZES:
      jj_consume_token(ONEZES);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EncodingDecl() throws ParseException {
    jj_consume_token(Space);
    jj_consume_token(Encod);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(Eq);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(QEncoding);
  }

  final public void extSubsetDecl() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PISTART:
      case DSO:
      case ELEMENTO:
      case ATTLISTO:
      case NOTATIONO:
      case ENTITYO:
      case Space:
      case Perc:
      case Comment:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PISTART:
      case ELEMENTO:
      case ATTLISTO:
      case NOTATIONO:
      case ENTITYO:
      case Comment:
        markupdecl();
        break;
      case DSO:
        conditionalSect();
        break;
      case Space:
      case Perc:
        DeclSep();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
  }

  final public void conditionalSect() throws ParseException {
    if (jj_2_2(3)) {
      includeSect();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DSO:
        ignoreSect();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void includeSect() throws ParseException {
 /*@bgen(jjtree) includeSect */
  ASTincludeSect jjtn000 = new ASTincludeSect(this, JJTINCLUDESECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DSO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(INCLUDE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(88);
      extSubsetDecl();
      jj_consume_token(DSC);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
    }
  }

  final public void ignoreSect() throws ParseException {
 /*@bgen(jjtree) ignoreSect */
  ASTignoreSect jjtn000 = new ASTignoreSect(this, JJTIGNORESECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(DSO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(IGNORE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(88);
      ignoreSectContents();
      jj_consume_token(DSC);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ignoreSectContents() throws ParseException {
    Ignore();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DSO:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_2;
      }
      jj_consume_token(DSO);
      ignoreSectContents();
      jj_consume_token(DSC);
      Ignore();
    }
  }

  final public void Ignore() throws ParseException {
Token t;
                while(true) {
                        t = getToken(1);
                        if(t.kind != DTDParserConstants.DSO && t.kind !=
                                DTDParserConstants.DSC) {
                                jj_consume_token(t.kind);
                        } else {
                                break;
                        }
                }
  }

  final public void DeclSep() throws ParseException {
 /*@bgen(jjtree) DeclSep */
  ASTDeclSep jjtn000 = new ASTDeclSep(this, JJTDECLSEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Perc:
        PEReference();
        break;
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtreeCloseNodeScope(jjtn000);
             }
    }
  }

  final public void markupdecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELEMENTO:
      elementdecl();
      break;
    case ATTLISTO:
      AttlistDecl();
      break;
    case ENTITYO:
      EntityDecl();
      break;
    case NOTATIONO:
      NotationDecl();
      break;
    case PISTART:
      PI();
      break;
    case Comment:
      Comment();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EntityDecl() throws ParseException {
 /*@bgen(jjtree) EntityDecl */
  ASTEntityDecl jjtn000 = new ASTEntityDecl(this, JJTENTITYDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      if (jj_2_3(2147483647)) {
        GEDecl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENTITYO:
          PEDecl();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtreeCloseNodeScope(jjtn000);
             }
    }
  }

  final public void GEDecl() throws ParseException {
    jj_consume_token(ENTITYO);
    jj_consume_token(Space);
    Name();
    jj_consume_token(Space);
    EntityDef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(DECLEND);
  }

  final public void PEDecl() throws ParseException {
    jj_consume_token(ENTITYO);
    jj_consume_token(Space);
    jj_consume_token(Perc);
    jj_consume_token(Space);
    Name();
    jj_consume_token(Space);
    PEDef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(DECLEND);
  }

  final public void EntityDef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQuotedDO:
    case DQuotedSO:
      EntityValue();
      break;
    case PUBLIC:
    case SYSTEM:
      ExternalID();
      if (jj_2_4(2)) {
        NDataDecl();
      } else {
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EntityValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQuotedDO:
      jj_consume_token(DQuotedDO);
          switchTo(EntityValueSectD);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Perc:
        case Amp:
        case ChRefHex:
        case ChRefDec:
        case DQuotedRestEntityValueD:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DQuotedRestEntityValueD:
          jj_consume_token(DQuotedRestEntityValueD);
          break;
        case Perc:
          PEReference();
                            switchTo(EntityValueSectD);
          break;
        case Amp:
        case ChRefHex:
        case ChRefDec:
          Reference();
                         switchTo(EntityValueSectD);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(DQuotedDC);
      break;
    case DQuotedSO:
      jj_consume_token(DQuotedSO);
         switchTo(EntityValueSectS);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Perc:
        case Amp:
        case ChRefHex:
        case ChRefDec:
        case DQuotedRestEntityValueS:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DQuotedRestEntityValueS:
          jj_consume_token(DQuotedRestEntityValueS);
          break;
        case Perc:
          PEReference();
                            switchTo(EntityValueSectS);
          break;
        case Amp:
        case ChRefHex:
        case ChRefDec:
          Reference();
                         switchTo(EntityValueSectS);
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(DQuotedSC);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PEDef() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQuotedDO:
    case DQuotedSO:
      EntityValue();
      break;
    case PUBLIC:
    case SYSTEM:
      ExternalID();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NDataDecl() throws ParseException {
    jj_consume_token(Space);
    jj_consume_token(NDATA);
    jj_consume_token(Space);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
    case Name:
      Name();
      break;
    case Perc:
      PEReference();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PEReference() throws ParseException {
    jj_consume_token(Perc);
    Name();
    jj_consume_token(SemiColon);
  }

  final public void contentspec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTY:
      jj_consume_token(EMPTY);
      break;
    case ANY:
      jj_consume_token(ANY);
      break;
    default:
      jj_la1[30] = jj_gen;
      if (jj_2_5(3)) {
        Mixed();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          children();
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void choice() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    cp();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      cp();
      if (jj_2_6(2)) {
        ;
      } else {
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(91);
  }

  final public void seq() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    cp();
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      jj_consume_token(92);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      cp();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(91);
  }

  final public void cp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
    case Name:
    case Perc:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        Name();
        break;
      case Perc:
        PEReference();
        break;
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      if (jj_2_8(2147483647)) {
        choice();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 89:
          seq();
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 93:
    case 94:
    case 95:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        break;
      case 94:
        jj_consume_token(94);
        break;
      case 95:
        jj_consume_token(95);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
  }

  final public void children() throws ParseException {
    if (jj_2_9(2147483647)) {
      choice();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        seq();
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 93:
    case 94:
    case 95:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
        jj_consume_token(93);
        break;
      case 94:
        jj_consume_token(94);
        break;
      case 95:
        jj_consume_token(95);
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
  }

  final public void Mixed() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(PC);
    if (jj_2_11(2)) {
      label_7:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Space:
          jj_consume_token(Space);
          break;
        default:
          jj_la1[49] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 90:
          jj_consume_token(90);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Space:
            jj_consume_token(Space);
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VERSION:
          case ANY:
          case EMPTY:
          case ID:
          case IDREF:
          case IDREFS:
          case ENTITY:
          case ENTITIES:
          case NMTOKEN:
          case NMTOKENS:
          case NOTATION:
          case CDATA:
          case NDATA:
          case IGNORE:
          case INCLUDE:
          case PUBLIC:
          case SYSTEM:
          case Name:
            Name();
            break;
          case Perc:
            PEReference();
            break;
          default:
            jj_la1[51] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case Perc:
          PEReference();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      jj_consume_token(91);
      jj_consume_token(94);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
      case 91:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Space:
          jj_consume_token(Space);
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(91);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void PI() throws ParseException {
 /*@bgen(jjtree) PI */
  ASTPI jjtn000 = new ASTPI(this, JJTPI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(PISTART);
      jj_consume_token(PI);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void Comment() throws ParseException {
 /*@bgen(jjtree) Comment */
  ASTComment jjtn000 = new ASTComment(this, JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(Comment);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void AttlistDecl() throws ParseException {
 /*@bgen(jjtree) AttlistDecl */
  ASTAttlistDecl jjtn000 = new ASTAttlistDecl(this, JJTATTLISTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ATTLISTO);
      jj_consume_token(Space);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        Name();
        break;
      case Perc:
        PEReference();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_8:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_8;
        }
        AttDef();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(DECLEND);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void NotationDecl() throws ParseException {
 /*@bgen(jjtree) NotationDecl */
  ASTNotationDecl jjtn000 = new ASTNotationDecl(this, JJTNOTATIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(NOTATIONO);
      jj_consume_token(Space);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        ndName();
        break;
      case Perc:
        ndPE();
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(DECLEND);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void ndName() throws ParseException {
    Name();
    jj_consume_token(Space);
    if (jj_2_13(2147483647)) {
      ExternalID();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        PublicID();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void ndPE() throws ParseException {
    PEReference();
    if (jj_2_15(2)) {
      jj_consume_token(Space);
      if (jj_2_14(2147483647)) {
        ExternalID();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          PublicID();
          break;
        default:
          jj_la1[61] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } else {
      ;
    }
  }

  final public void AttDef() throws ParseException {
    jj_consume_token(Space);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
    case Name:
      AttDefName();
      break;
    case Perc:
      AttDefPE();
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AttDefName() throws ParseException {
    Name();
    jj_consume_token(Space);
    AttType();
    jj_consume_token(Space);
    DefaultDecl();
  }

  final public void AttDefPE() throws ParseException {
    PEReference();
    if (jj_2_16(2)) {
      jj_consume_token(Space);
      AttType();
      jj_consume_token(Space);
      DefaultDecl();
    } else {
      ;
    }
  }

  final public void DefaultDecl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REQUIRED:
      jj_consume_token(REQUIRED);
      break;
    case IMPLIED:
      jj_consume_token(IMPLIED);
      break;
    case FIXED:
    case DQuotedDO:
    case DQuotedSO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FIXED:
        jj_consume_token(FIXED);
        jj_consume_token(Space);
        break;
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      AttrValue();
      break;
    default:
      jj_la1[64] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AttType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CDATA:
      jj_consume_token(CDATA);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    case IDREF:
      jj_consume_token(IDREF);
      break;
    case IDREFS:
      jj_consume_token(IDREFS);
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
      break;
    case ENTITIES:
      jj_consume_token(ENTITIES);
      break;
    case NMTOKEN:
      jj_consume_token(NMTOKEN);
      break;
    case NMTOKENS:
      jj_consume_token(NMTOKENS);
      break;
    case NOTATION:
    case 89:
      EnumeratedType();
      break;
    case Perc:
      PEReference();
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void EnumeratedType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTATION:
      NotationType();
      break;
    case 89:
      Enumeration();
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void NotationType() throws ParseException {
    jj_consume_token(NOTATION);
    jj_consume_token(Space);
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
    case Name:
      Name();
      break;
    case Perc:
      PEReference();
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_9:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        Name();
        break;
      case Perc:
        PEReference();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(91);
  }

  final public void ExternalID() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SYSTEM:
      jj_consume_token(SYSTEM);
      jj_consume_token(Space);
         switchTo(SysLiteral);
      jj_consume_token(SystemLiteral);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      jj_consume_token(Space);
         switchTo(Publicid);
      jj_consume_token(PubidLiteral);
      jj_consume_token(Space);
     switchTo(SysLiteral);
      jj_consume_token(SystemLiteral);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PublicID() throws ParseException {
    jj_consume_token(PUBLIC);
    jj_consume_token(Space);
         switchTo(Publicid);
    jj_consume_token(PubidLiteral);
  }

  final public void Enumeration() throws ParseException {
    jj_consume_token(89);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
    case Name:
      Name();
      break;
    case Perc:
      PEReference();
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_10:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        Name();
        break;
      case Perc:
        PEReference();
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Space:
      jj_consume_token(Space);
      break;
    default:
      jj_la1[79] = jj_gen;
      ;
    }
    jj_consume_token(91);
  }

  final public void elementdecl() throws ParseException {
 /*@bgen(jjtree) elementdecl */
  ASTelementdecl jjtn000 = new ASTelementdecl(this, JJTELEMENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
    try {
      jj_consume_token(ELEMENTO);
      jj_consume_token(Space);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VERSION:
      case ANY:
      case EMPTY:
      case ID:
      case IDREF:
      case IDREFS:
      case ENTITY:
      case ENTITIES:
      case NMTOKEN:
      case NMTOKENS:
      case NOTATION:
      case CDATA:
      case NDATA:
      case IGNORE:
      case INCLUDE:
      case PUBLIC:
      case SYSTEM:
      case Name:
        edName();
        break;
      case Perc:
        edPE();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Space:
        jj_consume_token(Space);
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      jj_consume_token(DECLEND);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
    }
  }

  final public void edName() throws ParseException {
    Name();
    jj_consume_token(Space);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANY:
    case EMPTY:
    case 89:
      contentspec();
      break;
    case Perc:
      PEReference();
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void edPE() throws ParseException {
    PEReference();
    if (jj_2_19(2)) {
      jj_consume_token(Space);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANY:
      case EMPTY:
      case 89:
        contentspec();
        break;
      case Perc:
        PEReference();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final public void Reference() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Amp:
      EntityRef();
      break;
    case ChRefHex:
    case ChRefDec:
      CharRef();
      break;
    default:
      jj_la1[84] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String EntityRef() throws ParseException {
StringBuffer sb = new StringBuffer();
Token t;
    t = jj_consume_token(Amp);
                sb.append(t.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Name:
      t = jj_consume_token(Name);
      break;
    case VERSION:
    case ANY:
    case EMPTY:
    case ID:
    case IDREF:
    case IDREFS:
    case ENTITY:
    case ENTITIES:
    case NMTOKEN:
    case NMTOKENS:
    case NOTATION:
    case CDATA:
    case NDATA:
    case IGNORE:
    case INCLUDE:
    case PUBLIC:
    case SYSTEM:
      t = KeyWords();
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                  sb.append(t.image);
    jj_consume_token(SemiColon);
                    sb.append(";");
         {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String CharRef() throws ParseException {
  Token t;
  StringBuffer sb = new StringBuffer();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ChRefHex:
      t = jj_consume_token(ChRefHex);
                 sb.append(t.image);
      t = jj_consume_token(Hex4);
             sb.append(t.image);
      jj_consume_token(SemiColon);
                sb.append(";");
      {if (true) return sb.toString();}
      break;
    case ChRefDec:
      t = jj_consume_token(ChRefDec);
                 sb.append(t.image);
      t = jj_consume_token(Dec);
            sb.append(t.image);
      jj_consume_token(SemiColon);
                sb.append(";");
      {if (true) return sb.toString();}
      break;
    default:
      jj_la1[86] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String AttrValue() throws ParseException {
  StringBuffer lit =new StringBuffer();
  Token tok;
  String ref;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DQuotedDO:
      tok = jj_consume_token(DQuotedDO);
        lit.append(tok.image);
        switchTo(AttValueSectD);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Perc:
        case SemiColon:
        case Amp:
        case ChRefHex:
        case ChRefDec:
        case DQuotedRestAttValueD:
          ;
          break;
        default:
          jj_la1[87] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Amp:
          ref = EntityRef();
         lit.append(ref);
         switchTo(AttValueSectD);
          break;
        case ChRefHex:
        case ChRefDec:
          ref = CharRef();
        lit.append(ref);
        switchTo(AttValueSectD);
          break;
        case DQuotedRestAttValueD:
          tok = jj_consume_token(DQuotedRestAttValueD);
        lit.append(tok.image);
          break;
        case SemiColon:
          tok = jj_consume_token(SemiColon);
        lit.append(tok.image);
        switchTo(AttValueSectD);
          break;
        case Perc:
          tok = jj_consume_token(Perc);
        lit.append(tok.image);
        switchTo(AttValueSectD);
          break;
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      tok = jj_consume_token(DQuotedDC);
      lit.append(tok.image);
      {if (true) return lit.toString();}
      break;
    case DQuotedSO:
      tok = jj_consume_token(DQuotedSO);
        lit.append(tok.image);
        switchTo(AttValueSectS);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Perc:
        case SemiColon:
        case Amp:
        case ChRefHex:
        case ChRefDec:
        case DQuotedRestAttValueS:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Amp:
          ref = EntityRef();
         lit.append(ref);
         switchTo(AttValueSectS);
          break;
        case ChRefHex:
        case ChRefDec:
          ref = CharRef();
        lit.append(ref);
        switchTo(AttValueSectS);
          break;
        case DQuotedRestAttValueS:
          tok = jj_consume_token(DQuotedRestAttValueS);
        lit.append(tok.image);
          break;
        case SemiColon:
          tok = jj_consume_token(SemiColon);
        lit.append(tok.image);
        switchTo(AttValueSectS);
          break;
        case Perc:
          tok = jj_consume_token(Perc);
        lit.append(tok.image);
        switchTo(AttValueSectS);
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      tok = jj_consume_token(DQuotedSC);
      lit.append(tok.image);
      {if (true) return lit.toString();}
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_3R_82() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(Space)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(Space)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(DQuotedSO)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DQuotedSC)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(DQuotedDO)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DQuotedDC)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ENTITYO)) return true;
    if (jj_scan_token(Space)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(Space)) return true;
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(DECLEND)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(90)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(Space)) return true;
    if (jj_scan_token(PubidLiteral)) return true;
    if (jj_scan_token(Space)) return true;
    if (jj_scan_token(SystemLiteral)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(94)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(SYSTEM)) return true;
    if (jj_scan_token(Space)) return true;
    if (jj_scan_token(SystemLiteral)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(PC)) return true;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(NOTATION)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(DSO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(INCLUDE)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(92)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(90)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(Space)) return true;
    if (jj_scan_token(Encod)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(89)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(49)) jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(Space)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(ChRefDec)) return true;
    if (jj_scan_token(Dec)) return true;
    if (jj_scan_token(SemiColon)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(ChRefHex)) return true;
    if (jj_scan_token(Hex4)) return true;
    if (jj_scan_token(SemiColon)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(Perc)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(SemiColon)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(Amp)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    if (jj_scan_token(SemiColon)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(Space)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(Space)) return true;
    if (jj_scan_token(NDATA)) return true;
    if (jj_scan_token(Space)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_23()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DTDParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[92];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffc60010,0xffc60010,0x2,0x0,0x0,0x0,0x60,0x0,0x0,0x4004,0x4004,0x4000,0x0,0x0,0x0,0x0,0x4000,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffc60010,0x60000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffc60010,0xffc60010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffc60010,0x0,0x0,0x0,0x0,0xffc60010,0x0,0xffc60010,0x0,0x0,0x0,0xffc60010,0x200000,0x380000,0x7fc00000,0x20000000,0x0,0xffc60010,0x0,0x0,0xffc60010,0x0,0x0,0x0,0xffc60010,0x0,0x0,0xffc60010,0x0,0xffc60010,0x0,0x60000,0x60000,0x0,0xffc60010,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10f,0xf,0x0,0x20000,0x20000,0x20000,0x0,0x20000,0x20000,0x200f0,0x200f0,0x0,0x20000,0x20000,0x20000,0x20000,0x0,0x20000,0xf0,0x80,0x20000,0x20000,0xc,0x0,0x0,0x0,0x0,0x0,0xc,0x10f,0x0,0x0,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x10f,0x10f,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x10f,0x0,0x20000,0x20000,0x20000,0x10f,0x20000,0x10f,0x20000,0x4,0x4,0x10f,0x0,0x0,0x0,0x0,0x20000,0x10f,0x20000,0x20000,0x10f,0x20000,0xc,0x20000,0x10f,0x20000,0x20000,0x10f,0x20000,0x10f,0x20000,0x0,0x0,0x0,0x10f,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4001,0x4001,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x4000,0x0,0x0,0x0,0x240,0x201d,0x201d,0x101d,0x101d,0x240,0x240,0x1,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x2000000,0xe0000000,0xe0000000,0x2000000,0xe0000000,0xe0000000,0x0,0x0,0x0,0x1,0x4000001,0x0,0x0,0x8000000,0x1,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x240,0x2000001,0x2000000,0x0,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0x0,0x0,0x1,0x0,0x1,0x0,0x2000001,0x2000001,0x1c,0x0,0x18,0x11f,0x11f,0x81f,0x81f,0x240,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[19];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DTDParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DTDParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DTDParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DTDParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DTDParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DTDParser(DTDParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DTDParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 92; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[96];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 92; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 96; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 19; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
