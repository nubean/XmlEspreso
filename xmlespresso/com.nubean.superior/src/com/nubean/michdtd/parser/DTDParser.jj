/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DTDParser.jj */
/*@egen*/options {
             
  IGNORE_CASE = true;
  STATIC = false;
  LOOKAHEAD = 1;
  DEBUG_PARSER = false; 
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(DTDParser)
package com.nubean.michdtd.parser;

import javax.swing.text.Document;
import org.xml.sax.SAXParseException;

import com.nubean.michbase.DefaultErrorHandler;

public class DTDParser/*@bgen(jjtree)*/implements DTDParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTDTDParserState jjtree = new JJTDTDParserState();

/*@egen*/
	private Document document;
	private DefaultErrorHandler errorHandler;
	private ParseException lastException;
	private TokenMgrError tokenError;
	
	public void setErrorHandler(DefaultErrorHandler errorHandler) {
		this.errorHandler = errorHandler;
	}
	
	private void recoverFromError(ParseException e) {
	 lastException = e;
	 try {
		if(errorHandler != null) {
			
			SAXParseException spe = null;
				if(e.currentToken.next != null) {
					spe = new SAXParseException(e.getMessage(), null, null,
		  				e.currentToken.next.beginLine, e.currentToken.next.beginColumn);
				} else {
					spe = new SAXParseException(e.getMessage(), null, null,
		  				e.currentToken.beginLine, e.currentToken.beginColumn);
				}
        		errorHandler.error(spe);
        	
        }
		
	  } catch(Exception sae) {
                	
      }
     
     }
     
     private void recoverFromError(TokenMgrError e) {
      tokenError = e;
	  try {
		if(errorHandler != null) {
			SAXParseException spe = 
			 new SAXParseException(e.getMessage(), null, null,0,0);
        	errorHandler.error(spe);
        }
	  } catch(Exception sae) {
                	
      }
     }
     
	private void jjtreeOpenNodeScope(SimpleNode sn) {
      sn.setFirstToken(getToken(1));
    }

    private  void jjtreeCloseNodeScope(SimpleNode sn){
      sn.setLastToken(getToken(0));
    }
    
    public Document getDocument() {
    	return  document;
    }
    
    public void setDocument(Document document) {
    	this.document = document;
    }
    
    public ParseException getParseException() {
    	return lastException;
    }
    
    public TokenMgrError getTokenMgrError() {
    	return tokenError;
    }
    
     private void switchTo(int state) {
    	token_source.SwitchTo(state);
    	if(token.next != null) {
    		if(token.next.image != null)
    			jj_input_stream.backup(token.next.image.length());
    		token.next = null;
    	}
    }
    
    public void setTabSize(int size) {
     jj_input_stream.setTabSize(size);
    }
    
}

PARSER_END(DTDParser)

TOKEN_MGR_DECLS:
{
}


<DEFAULT> TOKEN :
{
< XMLDeclStart:  "<?xml" >: XMLDeclSect
}

<DEFAULT, PCDataSect> TOKEN :
{
	<PISTART: "<?" >: PISect
}


<XMLDeclSect> TOKEN :
{
   <Encod: "encoding" > : EncodingSect
|  <VERSION:   "version" >
|  <ONEZES:    "'1.0'" >
|  <ONEZED:    "\"1.0\"" >
|  <YESZED:     "\"yes\"">
|  <YESZES:     "'yes'">
|  <NOZED:      "\"no\"">
|  <NOZES:      "'no'">
|  <STANDALONE: "standalone" >
|  <XMLDeclEnd: "?>" >: DEFAULT
}


TOKEN :
{
   < DECLEND:    ">"  > 
|  < DSO:       "<![" >
|  < DSC:       "]]>" >
|  < PC:        "#PCDATA" >
|  < ANY:       "ANY" >
|  < EMPTY:     "EMPTY" >
|  < REQUIRED:  "#REQUIRED" >
|  < IMPLIED:   "#IMPLIED" >
|  < FIXED:     "#FIXED" >
|  < ID:        "ID" >
|  < IDREF:     "IDREF" >
|  < IDREFS:    "IDREFS" >
|  < ENTITY:    "ENTITY" >
|  < ENTITIES:  "ENTITIES" >
|  < NMTOKEN:   "NMTOKEN" >
|  < NMTOKENS:  "NMTOKENS" >
|  < NOTATION:  "NOTATION" >
|  < CDATA:     "CDATA" >
|  < NDATA:     "NDATA" >
|  < IGNORE:    "IGNORE" >
|  < INCLUDE:   "INCLUDE" >
|  < PUBLIC:    "PUBLIC" >
|  < SYSTEM:    "SYSTEM" >
|  < ELEMENTO:	"<!ELEMENT" >
|  < ATTLISTO:  "<!ATTLIST" >
|  < NOTATIONO: "<!NOTATION" >
|  < ENTITYO:   "<!ENTITY" >
}


<DEFAULT, PISect> TOKEN:
{
	< Name: ( <Letter> | "_" | ":") ( <NameChar>)* >
}

<HexSect> TOKEN :
{
  < #Hex: ["0"-"9","a"-"f","A"-"F"] >
| < Hex4: <Hex> <Hex> <Hex> <Hex> > : DEFAULT
}
 
<DEFAULT, XMLDeclSect, EncodingSect> TOKEN :
{
   < Eq:  "=" >
}

<DEFAULT, SysLiteral, Enum> TOKEN :
{
   < Digits: ( <Digit> )+ >
|  < #MiscName:  "." | "-" | "_" | ":" >
|  < NameChar:  <Letter> | <Digit> | <MiscName> | <CombiningChar> | <Extender>>
|  <#CombiningChar:
["\u0300"-"\u0345"] | ["\u0360"-"\u0361"] | ["\u0483"-"\u0486"] | ["\u0591"-"\u05a1"] | ["\u05a3"-"\u05b9"] | ["\u05bb"-"\u05bd"] | "\u05bf" | ["\u05c1"-"\u05c2"] | "\u05c4" | ["\u064b"-"\u0652"] | "\u0670" | ["\u06d6"-"\u06dc"] | ["\u06dd"-"\u06df"] | ["\u06e0"-"\u06e4"] | ["\u06e7"-"\u06e8"] | ["\u06ea"-"\u06ed"] | ["\u0901"-"\u0903"] | "\u093c" | ["\u093e"-"\u094c"] | "\u094d" | ["\u0951"-"\u0954"] | ["\u0962"-"\u0963"] | ["\u0981"-"\u0983"] | "\u09bc" | "\u09be" | "\u09bf" | ["\u09c0"-"\u09c4"] | ["\u09c7"-"\u09c8"] | ["\u09cb"-"\u09cd"] | "\u09d7" | ["\u09e2"-"\u09e3"] | "\u0a02" | "\u0a3c" | "\u0a3e" | "\u0a3f" | ["\u0a40"-"\u0a42"] | ["\u0a47"-"\u0a48"] | ["\u0a4b"-"\u0a4d"] | ["\u0a70"-"\u0a71"] | ["\u0a81"-"\u0a83"] | "\u0abc" | ["\u0abe"-"\u0ac5"] | ["\u0ac7"-"\u0ac9"] | ["\u0acb"-"\u0acd"] | ["\u0b01"-"\u0b03"] | "\u0b3c" | ["\u0b3e"-"\u0b43"] | ["\u0b47"-"\u0b48"] | ["\u0b4b"-"\u0b4d"] | ["\u0b56"-"\u0b57"] | ["\u0b82"-"\u0b83"] | ["\u0bbe"-"\u0bc2"] | ["\u0bc6"-"\u0bc8"] | ["\u0bca"-"\u0bcd"] | "\u0bd7" | ["\u0c01"-"\u0c03"] | ["\u0c3e"-"\u0c44"] | ["\u0c46"-"\u0c48"] | ["\u0c4a"-"\u0c4d"] | ["\u0c55"-"\u0c56"] | ["\u0c82"-"\u0c83"] | ["\u0cbe"-"\u0cc4"] | ["\u0cc6"-"\u0cc8"] | ["\u0cca"-"\u0ccd"] | ["\u0cd5"-"\u0cd6"] | ["\u0d02"-"\u0d03"] | ["\u0d3e"-"\u0d43"] | ["\u0d46"-"\u0d48"] | ["\u0d4a"-"\u0d4d"] | "\u0d57" | "\u0e31" | ["\u0e34"-"\u0e3a"] | ["\u0e47"-"\u0e4e"] | "\u0eb1" | ["\u0eb4"-"\u0eb9"] | ["\u0ebb"-"\u0ebc"] | ["\u0ec8"-"\u0ecd"] | ["\u0f18"-"\u0f19"] | "\u0f35" | "\u0f37" | "\u0f39" | "\u0f3e" | "\u0f3f" | ["\u0f71"-"\u0f84"] | ["\u0f86"-"\u0f8b"] | ["\u0f90"-"\u0f95"] | "\u0f97" | ["\u0f99"-"\u0fad"] | ["\u0fb1"-"\u0fb7"] | "\u0fb9" | ["\u20d0"-"\u20dc"] | "\u20e1" | ["\u302a"-"\u302f"] | "\u3099" | "\u309a">
|  <#Extender: "\u00b7" | "\u02d0" | "\u02d1" | "\u0387" | "\u0640" | "\u0e46" | "\u0ec6" | "\u3005" | ["\u3031"-"\u3035"] | ["\u309d"-"\u309e"] | ["\u30fc"-"\u30fe"] >
}

<DEFAULT, XMLDeclSect, Publicid, SysLiteral, Enum, EncodingSect> TOKEN :
{
   < Space: ( <uS> )+ >
|  < #uS: ["\t","\n","\r"," ","\u3000"] >
}

<DEFAULT, SysLiteral, Enum> TOKEN :
{
   <#Digit: ["0"-"9"] | ["\u0660"-"\u0669"] | ["\u06f0"-"\u06f9"] | ["\u0966"-"\u096f"] | ["\u09e6"-"\u09ef"] | ["\u0a66"-"\u0a6f"] | ["\u0ae6"-"\u0aef"] | ["\u0b66"-"\u0b6f"] | ["\u0be7"-"\u0bef"] | ["\u0c66"-"\u0c6f"] | ["\u0ce6"-"\u0cef"] | ["\u0d66"-"\u0d6f"] | ["\u0e50"-"\u0e59"] | ["\u0ed0"-"\u0ed9"] | ["\u0f20"-"\u0f29"]>
|  < #Letter:  <BaseChar> | <Ideographic> >
|  <#BaseChar:
["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"] | ["\u00f8"-"\u00ff"] | ["\u0100"-"\u0131"] | ["\u0134"-"\u013e"] | ["\u0141"-"\u0148"] | ["\u014a"-"\u017e"] | ["\u0180"-"\u01c3"] | ["\u01cd"-"\u01f0"] | ["\u01f4"-"\u01f5"] | ["\u01fa"-"\u0217"] | ["\u0250"-"\u02a8"] | ["\u02bb"-"\u02c1"] | "\u0386" | ["\u0388"-"\u038a"] | "\u038c" | ["\u038e"-"\u03a1"] | ["\u03a3"-"\u03ce"] | ["\u03d0"-"\u03d6"] | "\u03da" | "\u03dc" | "\u03de" | "\u03e0" | ["\u03e2"-"\u03f3"] | ["\u0401"-"\u040c"] | ["\u040e"-"\u044f"] | ["\u0451"-"\u045c"] | ["\u045e"-"\u0481"] | ["\u0490"-"\u04c4"] | ["\u04c7"-"\u04c8"] | ["\u04cb"-"\u04cc"] | ["\u04d0"-"\u04eb"] | ["\u04ee"-"\u04f5"] | ["\u04f8"-"\u04f9"] | ["\u0531"-"\u0556"] | "\u0559" | ["\u0561"-"\u0586"] | ["\u05d0"-"\u05ea"] | ["\u05f0"-"\u05f2"] | ["\u0621"-"\u063a"] | ["\u0641"-"\u064a"] | ["\u0671"-"\u06b7"] | ["\u06ba"-"\u06be"] | ["\u06c0"-"\u06ce"] | ["\u06d0"-"\u06d3"] | "\u06d5" | ["\u06e5"-"\u06e6"] | ["\u0905"-"\u0939"] | "\u093d" | ["\u0958"-"\u0961"] | ["\u0985"-"\u098c"] | ["\u098f"-"\u0990"] | ["\u0993"-"\u09a8"] | ["\u09aa"-"\u09b0"] | "\u09b2" | ["\u09b6"-"\u09b9"] | ["\u09dc"-"\u09dd"] | ["\u09df"-"\u09e1"] | ["\u09f0"-"\u09f1"] | ["\u0a05"-"\u0a0a"] | ["\u0a0f"-"\u0a10"] | ["\u0a13"-"\u0a28"] | ["\u0a2a"-"\u0a30"] | ["\u0a32"-"\u0a33"] | ["\u0a35"-"\u0a36"] | ["\u0a38"-"\u0a39"] | ["\u0a59"-"\u0a5c"] | "\u0a5e" | ["\u0a72"-"\u0a74"] | ["\u0a85"-"\u0a8b"] | "\u0a8d" | ["\u0a8f"-"\u0a91"] | ["\u0a93"-"\u0aa8"] | ["\u0aaa"-"\u0ab0"] | ["\u0ab2"-"\u0ab3"] | ["\u0ab5"-"\u0ab9"] | "\u0abd" | "\u0ae0" | ["\u0b05"-"\u0b0c"] | ["\u0b0f"-"\u0b10"] | ["\u0b13"-"\u0b28"] | ["\u0b2a"-"\u0b30"] | ["\u0b32"-"\u0b33"] | ["\u0b36"-"\u0b39"] | "\u0b3d" | ["\u0b5c"-"\u0b5d"] | ["\u0b5f"-"\u0b61"] | ["\u0b85"-"\u0b8a"] | ["\u0b8e"-"\u0b90"] | ["\u0b92"-"\u0b95"] | ["\u0b99"-"\u0b9a"] | "\u0b9c" | ["\u0b9e"-"\u0b9f"] | ["\u0ba3"-"\u0ba4"] | ["\u0ba8"-"\u0baa"] | ["\u0bae"-"\u0bb5"] | ["\u0bb7"-"\u0bb9"] | ["\u0c05"-"\u0c0c"] | ["\u0c0e"-"\u0c10"] | ["\u0c12"-"\u0c28"] | ["\u0c2a"-"\u0c33"] | ["\u0c35"-"\u0c39"] | ["\u0c60"-"\u0c61"] | ["\u0c85"-"\u0c8c"] | ["\u0c8e"-"\u0c90"] | ["\u0c92"-"\u0ca8"] | ["\u0caa"-"\u0cb3"] | ["\u0cb5"-"\u0cb9"] | "\u0cde" | ["\u0ce0"-"\u0ce1"] | ["\u0d05"-"\u0d0c"] | ["\u0d0e"-"\u0d10"] | ["\u0d12"-"\u0d28"] | ["\u0d2a"-"\u0d39"] | ["\u0d60"-"\u0d61"] | ["\u0e01"-"\u0e2e"] | "\u0e30" | ["\u0e32"-"\u0e33"] | ["\u0e40"-"\u0e45"] | ["\u0e81"-"\u0e82"] | "\u0e84" | ["\u0e87"-"\u0e88"] | "\u0e8a" | "\u0e8d" | ["\u0e94"-"\u0e97"] | ["\u0e99"-"\u0e9f"] | ["\u0ea1"-"\u0ea3"] | "\u0ea5" | "\u0ea7" | ["\u0eaa"-"\u0eab"] | ["\u0ead"-"\u0eae"] | "\u0eb0" | ["\u0eb2"-"\u0eb3"] | "\u0ebd" | ["\u0ec0"-"\u0ec4"] | ["\u0f40"-"\u0f47"] | ["\u0f49"-"\u0f69"] | ["\u10a0"-"\u10c5"] | ["\u10d0"-"\u10f6"] | "\u1100" | ["\u1102"-"\u1103"] | ["\u1105"-"\u1107"] | "\u1109" | ["\u110b"-"\u110c"] | ["\u110e"-"\u1112"] | "\u113c" | "\u113e" | "\u1140" | "\u114c" | "\u114e" | "\u1150" | ["\u1154"-"\u1155"] | "\u1159" | ["\u115f"-"\u1161"] | "\u1163" | "\u1165" | "\u1167" | "\u1169" | ["\u116d"-"\u116e"] | ["\u1172"-"\u1173"] | "\u1175" | "\u119e" | "\u11a8" | "\u11ab" | ["\u11ae"-"\u11af"] | ["\u11b7"-"\u11b8"] | "\u11ba" | ["\u11bc"-"\u11c2"] | "\u11eb" | "\u11f0" | "\u11f9" | ["\u1e00"-"\u1e9b"] | ["\u1ea0"-"\u1ef9"] | ["\u1f00"-"\u1f15"] | ["\u1f18"-"\u1f1d"] | ["\u1f20"-"\u1f45"] | ["\u1f48"-"\u1f4d"] | ["\u1f50"-"\u1f57"] | "\u1f59" | "\u1f5b" | "\u1f5d" | ["\u1f5f"-"\u1f7d"] | ["\u1f80"-"\u1fb4"] | ["\u1fb6"-"\u1fbc"] | "\u1fbe" | ["\u1fc2"-"\u1fc4"] | ["\u1fc6"-"\u1fcc"] | ["\u1fd0"-"\u1fd3"] | ["\u1fd6"-"\u1fdb"] | ["\u1fe0"-"\u1fec"] | ["\u1ff2"-"\u1ff4"] | ["\u1ff6"-"\u1ffc"] | "\u2126" | ["\u212a"-"\u212b"] | "\u212e" | ["\u2180"-"\u2182"] | ["\u3041"-"\u3094"] | ["\u30a1"-"\u30fa"] | ["\u3105"-"\u312c"] | ["\uac00"-"\ud7a3"] >
|  <#Ideographic: ["\u4e00"-"\u9fa5"] | "\u3007" | ["\u3021"-"\u3029"] >
}

<Publicid> TOKEN :
{
   <PubidLiteral:  (<DQuote> <PubidCharsDQuote> <DQuote>) | (<SQuote> <PubidCharsSQuote> <SQuote>) >: DEFAULT
|  < #DQuote: "\"" >
|  < #SQuote: "'" >
|  < #SpecialCharsDQuote:  ["-","'","(",")","+",",",".","/",":","=","?"] >
|  < #SpecialCharsSQuote:  ["-","(",")","+",",",".","/",":","=","?"] >
|  < #PubidCharDQuote: <uS> | <Letter> | <Digit> | <SpecialCharsDQuote> >
|  < #PubidCharSQuote:  <uS> | <Letter> | <Digit> | <SpecialCharsSQuote> >
|  < #PubidCharsDQuote:  ( <PubidCharDQuote> )* >
|  < #PubidCharsSQuote:  ( <PubidCharSQuote> )* >
}

<DEFAULT, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < Perc: "%" > : DEFAULT
}

<DEFAULT, AttValueSectD, AttValueSectS, EntityValueSectS, EntityValueSectD, Enum> TOKEN :
{
   < SemiColon: ";" > : DEFAULT
}

<DEFAULT, PCDataSect, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < Amp: "&" >: DEFAULT
}

<PCDataSect, EntityValueSectS, EntityValueSectD, AttValueSectD, AttValueSectS, Enum> TOKEN :
{
   < ChRefHex: "&#x" > : HexSect
|  < ChRefDec: "&#" > : DecSect
}

<DecSect> TOKEN :
{
   < Dec: ( ["0"-"9"] )+ > : DEFAULT 
}



<DEFAULT> TOKEN :
{
   < DQuotedDO: "\"" >
}

<AttValueSectD, EntityValueSectD> TOKEN :
{
   < DQuotedDC: "\"" >: DEFAULT
}

<AttValueSectD> TOKEN :
{
   < DQuotedRestAttValueD: ( ~["\"","<", "&"] )+ >
}

<DEFAULT> TOKEN :
{
   < DQuotedSO: "'" >
}

<AttValueSectS, EntityValueSectS> TOKEN :
{
   < DQuotedSC: "'" >: DEFAULT
}

<AttValueSectS> TOKEN :
{
   < DQuotedRestAttValueS: ( ~["'","<", "&"] )+ >
}

<EntityValueSectS> TOKEN :
{
   < DQuotedRestEntityValueS: ( ~["'","%", "&"] )+ >
}

<EntityValueSectD> TOKEN :
{
   < DQuotedRestEntityValueD: ( ~["\"","%", "&"] )+ >
}

<DEFAULT, PCDataSect> TOKEN:
{
	< Comment: "<!--" (~["-"])* ("-" (~["-"])+)* "-->" > : DEFAULT
}

<PISect> TOKEN:
{
< PI:  <Name>  ( ~["?"] )* ( ("?" ( ~[">"] )+ )* ( ~["?"] )* )* "?>" > : DEFAULT
}

<SysLiteral> TOKEN :
{
   < SystemLiteral: <DSystemLiteral> | <SSystemLiteral> > : DEFAULT
|  < #DSystemLiteral: "\"" ( ~["\""] )* "\"" > 
|  < #SSystemLiteral: "'" ( ~["'"] )* "'" >
}

<SysRestSLiteral> TOKEN :
{
   < SSystemRestLiteral: ( ~["'"] )* "'" > : DEFAULT
}

<SysRestDLiteral> TOKEN :
{
   < DSystemRestLiteral: ( ~["\""] )* "\"" > : DEFAULT
}

<EncodingSect> TOKEN :
{
   < QEncoding:  ( "'" <Encoding> "'" ) | ( "\"" <Encoding> "\"" ) > : XMLDeclSect
|  < Encoding: <LatinName> > 
|  < #LatinName :  ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9","-",".","_"] )* >
}

void Name():
{/*@bgen(jjtree) Name */
  ASTName jjtn000 = new ASTName(this, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Name */
        try {
/*@egen*/
	<Name> | KeyWords()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

Token KeyWords() :
{/*@bgen(jjtree) KeyWords */
  ASTKeyWords jjtn000 = new ASTKeyWords(this, JJTKEYWORDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
  Token tok; 
}
{/*@bgen(jjtree) KeyWords */
try {
/*@egen*/
(
  tok = <ANY>
| tok = <EMPTY>
| tok = <VERSION>
| tok = <ID>
| tok = <IDREF>
| tok = <IDREFS>
| tok = <ENTITY>
| tok = <NOTATION>
| tok = <ENTITIES>
| tok = <NMTOKEN>
| tok = <NMTOKENS>
| tok = <CDATA>
| tok = <NDATA>
| tok = <IGNORE>
| tok = <INCLUDE>
| tok = <PUBLIC>
| tok = <SYSTEM>
)/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtreeCloseNodeScope(jjtn000);
}
/*@egen*/
{
  return tok;
}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
    jjtreeCloseNodeScope(jjtn000);
  }
}
/*@egen*/

}

ASTdtd dtd() :
{/*@bgen(jjtree) dtd */
  ASTdtd jjtn000 = new ASTdtd(this, JJTDTD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) dtd */
        try {
/*@egen*/
	{
		lastException = null; 
		tokenError = null;
	}
	try {
	   (TextDecl())? extSubsetDecl() 
    } catch(ParseException e) {
		recoverFromError(e);
	} catch(TokenMgrError te) {
		recoverFromError(te);
	}/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtreeCloseNodeScope(jjtn000);
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void TextDecl():
{/*@bgen(jjtree) TextDecl */
  ASTTextDecl jjtn000 = new ASTTextDecl(this, JJTTEXTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) TextDecl */
        try {
/*@egen*/
 	<XMLDeclStart>
 	VersionInfo()
 	(LOOKAHEAD(2)EncodingDecl())?
 	(<Space>)?
 	<XMLDeclEnd>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void VersionInfo()      :
{
}
{
  <Space>
  <VERSION>
  (<Space>)?
  <Eq>
   (<Space>)?
  (<ONEZED> | <ONEZES>)
}

void EncodingDecl()      :
{
}
{
  <Space>
  <Encod>
  (<Space>)?
  (<Eq>)
  (<Space>)?
  <QEncoding>
}


void extSubsetDecl()      :
{}
{
	(markupdecl() | conditionalSect() | DeclSep())* <EOF>
}

void conditionalSect()      :
{
}
{
	  LOOKAHEAD(3)
	  includeSect() | ignoreSect()
}

void includeSect() :
{/*@bgen(jjtree) includeSect */
  ASTincludeSect jjtn000 = new ASTincludeSect(this, JJTINCLUDESECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) includeSect */
 try {
/*@egen*/
 <DSO> (<Space>)? <INCLUDE> (<Space>)? "[" extSubsetDecl() <DSC>/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtreeCloseNodeScope(jjtn000);
   }
 }
/*@egen*/ 
}

void ignoreSect() :
{/*@bgen(jjtree) ignoreSect */
  ASTignoreSect jjtn000 = new ASTignoreSect(this, JJTIGNORESECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ignoreSect */
        try {
/*@egen*/
	<DSO> (<Space>)? <IGNORE> (<Space>)? "[" ignoreSectContents() <DSC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ignoreSectContents()       :
{
}
{
	    Ignore() (<DSO> ignoreSectContents() <DSC> Ignore())* 
}

void Ignore()       :
{
Token t;
}
{
	{
		while(true) {
			t = getToken(1);
	 		if(t.kind != DTDParserConstants.DSO && t.kind !=
	 			DTDParserConstants.DSC) {
	 		 	jj_consume_token(t.kind);
	 		} else {
	 			break;
	 		}
	 	}
	}

}

void DeclSep():
{/*@bgen(jjtree) DeclSep */
  ASTDeclSep jjtn000 = new ASTDeclSep(this, JJTDECLSEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DeclSep */
           try {
/*@egen*/
	   PEReference() | <Space>/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtreeCloseNodeScope(jjtn000);
             }
           }
/*@egen*/ 
}

void markupdecl()     :
{}
{
  elementdecl() 
| AttlistDecl() 
| EntityDecl() 
| NotationDecl() 
| PI() 
| Comment() 
}
void EntityDecl():
{/*@bgen(jjtree) EntityDecl */
  ASTEntityDecl jjtn000 = new ASTEntityDecl(this, JJTENTITYDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EntityDecl */
           try {
/*@egen*/
	   LOOKAHEAD(GEDecl()) GEDecl() 
	   | PEDecl()/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtreeCloseNodeScope(jjtn000);
             }
           }
/*@egen*/  
}
void GEDecl()     :
{
}
{

	<ENTITYO>
	 <Space>
	 (Name()) 
	 <Space>
	  EntityDef() 
	  (<Space>)? 
	<DECLEND>
}

void PEDecl()     :
{
}
{
	<ENTITYO>
	<Space>
	"%" 
	<Space>
	(Name()) 
	<Space>
	 PEDef() 
	 (<Space>)? 
	 <DECLEND>
}

void EntityDef()     :
{}
{
	   EntityValue() 
	   | 
	   (ExternalID() (LOOKAHEAD(2) NDataDecl()) ?) 
}

void EntityValue()     :
{
}
{
	 <DQuotedDO>
	 {switchTo(EntityValueSectD);}
	( 
	  <DQuotedRestEntityValueD>
	  | PEReference()  {switchTo(EntityValueSectD);}
	  | Reference() {switchTo(EntityValueSectD);}
	)* 
	<DQuotedDC>
   |  
   <DQuotedSO>
   	{switchTo(EntityValueSectS);}
	( 
	  <DQuotedRestEntityValueS>
	  | PEReference()  {switchTo(EntityValueSectS);}
	  | Reference() {switchTo(EntityValueSectS);}
    )* 
	<DQuotedSC>
}

void PEDef()     :
{}
{
    EntityValue() | ExternalID()  
}
void NDataDecl()      :
{
}
{
	  <Space>
	  <NDATA> 
	  <Space> 
	  (Name() | PEReference())
}

void PEReference()     :
{
}
{
	<Perc>
	(Name()) 
	 <SemiColon>
}

void contentspec()     :
{
}
{
	<EMPTY>
	 | 
	 <ANY> 
	 | LOOKAHEAD(3) Mixed() 
	 | children() 
}
void choice()     :
{
}
{
	"(" 
	(<Space>)? 
	cp() 
	( LOOKAHEAD(2) (<Space>)? 
	"|" 
	(<Space>)? cp() )+ 
	(<Space>)? 
	")"
}

void seq()     :
{
}
{
	"(" 
	(<Space>)? 
	cp() 
	( LOOKAHEAD(2)(<Space>)? 
	","
	 (<Space>)? 
	 cp() )* (<Space>)? 
	 ")"
}

void cp()     :
{

}
{
	(
	(Name() | PEReference())
	 | 
	 LOOKAHEAD(choice()) choice() 
	 | seq()) (
	 "?" 
	 | "*" 
	 | "+"
	 )?
}

void children()     :
{
}
{
	(
		LOOKAHEAD(choice()) 
		choice() 
		| seq()
	) 
	(
	"?" 
	 | "*" 
	 | "+"
	 )?
}

void Mixed()     :
{

}
{
	"("
	 (<Space>)? 
	 <PC> 
	(  LOOKAHEAD(2)(( LOOKAHEAD(2)
	(<Space>)? 
	(
		(
			"|" 
			(<Space>)? 
			(Name() | PEReference())
		)
		|
		(
			PEReference()
		)
	)
		
	)* (<Space>)? 
	")" "*"
	)   
   | ((<Space>)? 
   ")" 
   ) )
	
}

void PI() :
{/*@bgen(jjtree) PI */
  ASTPI jjtn000 = new ASTPI(this, JJTPI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) PI */
        try {
/*@egen*/
	<PISTART>
	<PI>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}


void Comment() :
{/*@bgen(jjtree) Comment */
  ASTComment jjtn000 = new ASTComment(this, JJTCOMMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Comment */
        try {
/*@egen*/
	<Comment>/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void AttlistDecl():
{/*@bgen(jjtree) AttlistDecl */
  ASTAttlistDecl jjtn000 = new ASTAttlistDecl(this, JJTATTLISTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AttlistDecl */
        try {
/*@egen*/
	<ATTLISTO>
  	 <Space>
  	 (Name() | PEReference()) 
	(
	 LOOKAHEAD(2) 
	 AttDef()
	)* 
	
	(<Space>)? 
	<DECLEND>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void NotationDecl():
{/*@bgen(jjtree) NotationDecl */
  ASTNotationDecl jjtn000 = new ASTNotationDecl(this, JJTNOTATIONDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) NotationDecl */
        try {
/*@egen*/
	"<!NOTATION"
 	<Space>
 	(ndName() | ndPE())
	(<Space>)? 
	<DECLEND>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ndName()      :
{
}
{
 	Name()
	<Space>
	(
		LOOKAHEAD(ExternalID()) 
		ExternalID() 
		| 
		PublicID()
	) 
}

void ndPE()      :
{
}
{
 	PEReference()
 	(
 	LOOKAHEAD(2)
	<Space>
	(
		LOOKAHEAD(ExternalID()) 
		ExternalID() 
		| 
		PublicID()
	) 
	)?
}

void AttDef()     :
{
}
{
	<Space>
	(AttDefName() | AttDefPE())
}

void AttDefName()     :
{
}
{
	Name() 
	<Space>
    AttType() 
    <Space> 
    DefaultDecl()
}

void AttDefPE()     :
{
}
{
	PEReference() 
	(LOOKAHEAD(2)
	<Space>
    AttType() 
    <Space> 
    DefaultDecl()
    )?
}

void DefaultDecl()     :
{
}
{
   <REQUIRED>
   |  
   <IMPLIED> 
   | 
   (
   (<FIXED> 
   	<Space>
   )? 
   AttrValue()
   ) 
}

void AttType()     :
{
}
{
	<CDATA>
	| <ID> 
	| <IDREF> 
	| <IDREFS> 
	| <ENTITY> 
	| <ENTITIES>
	| <NMTOKEN> 
	| <NMTOKENS> 
	| EnumeratedType()
	| PEReference()

}

void EnumeratedType()     :
{
}
{
	NotationType() | Enumeration()
}

void NotationType()     :
{

}
{
	<NOTATION> 
	<Space>
	 "("
	 (<Space>)? 
	 (Name() | PEReference()) 
	 (
	 LOOKAHEAD(2)
	 (<Space>)? 
	 "|" 
	 (<Space>)? 
	 (Name() | PEReference()) 
	 )* 
	 (<Space>)? 
	 ")" 
}

void ExternalID()     :
{
}
{
	(
	<SYSTEM>
	<Space>
	{switchTo(SysLiteral); }
	<SystemLiteral>  
	)
   | 
   (
   	<PUBLIC>
   	<Space>
   	{switchTo(Publicid);}
   	<PubidLiteral>
    <Space>
    {switchTo(SysLiteral);}
   	 <SystemLiteral>
   	) 

}

void PublicID()     :
{

}
{
	
	<PUBLIC>
	<Space>
	{switchTo(Publicid);}
	<PubidLiteral> 
}

void Enumeration()     :
{
}
{
	"("
  	
  	 (<Space>)? 
  	 (Name() | PEReference())
  	 (
  	 
  	 LOOKAHEAD(2) 
  	 (<Space>)? 
  	 "|" 
  	 (<Space>)? 
  	 (Name() | PEReference()) 
  	 )* 
  	 
  	 (<Space>)? 
  	 ")"
}

void elementdecl():
{/*@bgen(jjtree) elementdecl */
  ASTelementdecl jjtn000 = new ASTelementdecl(this, JJTELEMENTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) elementdecl */
        try {
/*@egen*/
	
	<ELEMENTO> 
	<Space>
	(edName() | edPE())
	(<Space>)? 
	<DECLEND>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void edName()      :
{
}
{
	
	Name()
	<Space>
	(contentspec()  | PEReference())
}

void edPE()      :
{
}
{
	
	PEReference()
	(LOOKAHEAD(2)
	<Space>
	(contentspec()  | PEReference()))? 
}

void Reference()     :
{
}
{
	(
	EntityRef()
	|
	CharRef()
	)
}

String EntityRef()     :
{
StringBuffer sb = new StringBuffer();
Token t;
}
{
	t=<Amp>{sb.append(t.image);}
	(t=<Name> | t=KeyWords()){sb.append(t.image);}
	<SemiColon>{sb.append(";");}
	{return sb.toString();}
}

String CharRef()      :
{
  Token t;
  StringBuffer sb = new StringBuffer();
}
{
  (
    t=<ChRefHex>{sb.append(t.image);}
    t=<Hex4>{sb.append(t.image);}
    <SemiColon>{sb.append(";");}
    {
      return sb.toString();
    }
  )
  |
  (
    t=<ChRefDec>{sb.append(t.image);}
    t=<Dec>{sb.append(t.image);}
    <SemiColon>{sb.append(";");}
    {
      return sb.toString();
    }
  )
}

String AttrValue()      :
{
  StringBuffer lit =new StringBuffer();
  Token tok;
  String ref;
}
{
  (
    tok=<DQuotedDO>
    {
    	lit.append(tok.image);
    	switchTo(AttValueSectD);
    	
    }
    (
      ref=EntityRef() 
      {
      	 lit.append(ref);
      	 switchTo(AttValueSectD);
      }
    | ref = CharRef()
      {
        lit.append(ref);
        switchTo(AttValueSectD);
      }
    | tok = <DQuotedRestAttValueD>
      {
        lit.append(tok.image);
      }
    | tok = <SemiColon>
      {
        lit.append(tok.image);
        switchTo(AttValueSectD);
      }
    | tok = <Perc>
      {
        lit.append(tok.image);
        switchTo(AttValueSectD);
      }
    )*
    tok=<DQuotedDC> 
    {
      lit.append(tok.image);
      return lit.toString();
    }
  )
  |
  (
    tok=<DQuotedSO>
    {
    	lit.append(tok.image);
    	switchTo(AttValueSectS);
    	
    }
    (
      ref=EntityRef()
      {
      	 lit.append(ref);
      	 switchTo(AttValueSectS);
      }
    | ref = CharRef()
      {
        lit.append(ref);
        switchTo(AttValueSectS);
      }
    | tok = <DQuotedRestAttValueS>
      {
        lit.append(tok.image);
      }
    | tok = <SemiColon>
      {
        lit.append(tok.image);
        switchTo(AttValueSectS);
      }
    | tok = <Perc>
      {
        lit.append(tok.image);
        switchTo(AttValueSectS);
      }
    )*
    tok=<DQuotedSC> 
    {
      lit.append(tok.image);
      return lit.toString();
    }
  )
}
