/* Generated By:JJTree&JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
/*
The MIT License (MIT)

Copyright (c) 2015 NuBean LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package com.nubean.javacc.parser;
import com.nubean.michbase.DefaultErrorHandler;
import org.xml.sax.SAXParseException;
import javax.swing.text.Document;

/** Token Manager. */
public class JavaCCParserTokenManager implements JavaCCParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x140000L) != 0L || (active1 & 0x202000000000000L) != 0L)
            return 2;
         if ((active1 & 0x40000000L) != 0L)
            return 8;
         if ((active0 & 0xfffffffffe001ffeL) != 0L || (active1 & 0x7ffL) != 0L)
         {
            jjmatchedKind = 83;
            return 42;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
            return 0;
         if ((active0 & 0x403000000000L) != 0L)
            return 42;
         if ((active0 & 0xffffbfcffe001ffeL) != 0L || (active1 & 0x7ffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0xffb3afeffe000ffeL) != 0L || (active1 & 0x77fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 2;
            }
            return 42;
         }
         if ((active0 & 0x4c100000001000L) != 0L || (active1 & 0x80L) != 0L)
            return 42;
         return -1;
      case 3:
         if ((active0 & 0xff2b8faf4e0009feL) != 0L || (active1 & 0x63bL) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 3;
            return 42;
         }
         if ((active0 & 0x902040b0000600L) != 0L || (active1 & 0x144L) != 0L)
            return 42;
         return -1;
      case 4:
         if ((active0 & 0x5f2b80ac0600017eL) != 0L || (active1 & 0x223L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 83;
               jjmatchedPos = 4;
            }
            return 42;
         }
         if ((active0 & 0xa0000f0348000880L) != 0L || (active1 & 0x418L) != 0L)
            return 42;
         return -1;
      case 5:
         if ((active0 & 0x5821002000000000L) != 0L || (active1 & 0x11L) != 0L)
            return 42;
         if ((active0 & 0x70a848c0600097eL) != 0L || (active1 & 0x222L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 5;
            return 42;
         }
         return -1;
      case 6:
         if ((active0 & 0x40a80040200097cL) != 0L || (active1 & 0x222L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
            return 42;
         }
         if ((active0 & 0x300048804000002L) != 0L)
            return 42;
         return -1;
      case 7:
         if ((active0 & 0x40a80000000093cL) != 0L || (active1 & 0x22L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 7;
            return 42;
         }
         if ((active0 & 0x402000040L) != 0L || (active1 & 0x200L) != 0L)
            return 42;
         return -1;
      case 8:
         if ((active0 & 0x408000000000004L) != 0L || (active1 & 0x20L) != 0L)
            return 42;
         if ((active0 & 0x2800000000938L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x918L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 9;
            return 42;
         }
         if ((active0 & 0x2800000000020L) != 0L)
            return 42;
         return -1;
      case 10:
         if ((active0 & 0x8L) != 0L)
            return 42;
         if ((active0 & 0x910L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 10;
            return 42;
         }
         return -1;
      case 11:
         if ((active0 & 0x900L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 11;
            return 42;
         }
         if ((active0 & 0x10L) != 0L || (active1 & 0x2L) != 0L)
            return 42;
         return -1;
      case 12:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 12;
            return 42;
         }
         if ((active0 & 0x100L) != 0L)
            return 42;
         return -1;
      case 13:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 13;
            return 42;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 98;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 35:
         return jjStopAtPos(0, 126);
      case 37:
         jjmatchedKind = 117;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000000L);
      case 38:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400080000000000L);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000000L);
      case 43:
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40100000000000L);
      case 44:
         return jjStopAtPos(0, 93);
      case 45:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80200000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 94, 8);
      case 47:
         jjmatchedKind = 113;
         return jjMoveStringLiteralDfa1_0(0x140000L, 0x200000000000000L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 92);
      case 60:
         jjmatchedKind = 97;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L);
      case 62:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L);
      case 63:
         return jjStopAtPos(0, 100);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x30L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x500L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x880L, 0x0L);
      case 91:
         return jjStopAtPos(0, 90);
      case 93:
         return jjStopAtPos(0, 91);
      case 94:
         jjmatchedKind = 116;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1c000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x7e0000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3800000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f0000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xe0000000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0xf00000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe000000000000000L, 0x3L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfcL);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x300L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 123:
         return jjStopAtPos(0, 88);
      case 124:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800040000000000L);
      case 125:
         return jjStopAtPos(0, 89);
      case 126:
         return jjStopAtPos(0, 99);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 42:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 0);
         break;
      case 43:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 108);
         break;
      case 45:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 109);
         break;
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 61:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 102);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 103);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 104);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 105);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x70L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x1a84L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x120010060000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1040000800000000L, active1, 0L);
      case 102:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 42);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000080000000L, active1, 0x41cL);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x84100000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xe000000000000L, active1, 0L);
      case 111:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10302604000000L, active1, 0x300L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000008000000L, active1, 0xe0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8880000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0x2L);
      case 124:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0L);
      case 70:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x880L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x230L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000180000000L, active1, 0x20L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x505L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010000000000L, active1, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10060600000000L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400080004000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8001800000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 42);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x18L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004022000000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1028208050000002L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x40L);
      case 119:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 42);
         break;
      case 121:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L);
      case 69:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x880L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L);
      case 80:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 42);
         break;
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x30L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xe0808000000L, active1, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L, active1, 0x2L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 42);
         break;
      case 101:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 42);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 42);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 42);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x8008008000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 52, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000002L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 55, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x800800004000000L, active1, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x18L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x10300000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4402000402000000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa5_0(active0, 0x30L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0L);
      case 78:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x302000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 42);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x400800004000000L, active1, 0L);
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x4800000400000000L, active1, 0L);
      case 107:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 42);
         break;
      case 108:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x42000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x1009000002000000L, active1, 0L);
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 42);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x30L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x6000000L, active1, 0L);
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 42);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 42);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 42);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x220L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x40800000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000400000002L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 42);
         break;
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x4L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x38L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000002000000L, active1, 0L);
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 42);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 42);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 115:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 1, 42);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 42);
         break;
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 35, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L, active1, 0L);
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x4L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x8L, active1, 0L);
      case 69:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x20L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 42);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x402000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0x22L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x8L, active1, 0L);
      case 68:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 2, 42);
         break;
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x10L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 42);
         break;
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 42);
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(8, 69, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(9, 5, 42);
         break;
      case 71:
         return jjMoveStringLiteralDfa10_0(active0, 0x10L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa10_0(active0, 0x8L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active1, 0L);
      case 102:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 49, 42);
         break;
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 47, 42);
         break;
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0L);
      case 69:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(10, 3, 42);
         break;
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x10L, active1, 0L);
      case 75:
         return jjMoveStringLiteralDfa11_0(active0, 0x100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x900L, active1, 0L);
      case 78:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(11, 4, 42);
         break;
      case 100:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(11, 65, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 78:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(12, 8, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(14, 11, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 62;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if (curChar == 36)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddTwoStates(5, 6);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 75)
                        kind = 75;
                     jjCheckNAddStates(12, 14);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 19)
                     kind = 19;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (curChar == 46)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(15, 17);
                  break;
               case 10:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if (curChar == 39 && kind > 81)
                     kind = 81;
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 15);
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 20:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 27:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 28:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 30:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(18, 21);
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 41:
                  if (curChar != 36)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(22, 24);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddStates(22, 24);
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(49, 12);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  jjCheckNAddTwoStates(53, 12);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 27);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 12);
                  break;
               case 58:
                  if (curChar != 48)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddStates(12, 14);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(60, 6);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(61, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(42);
                  break;
               case 1:
                  if (kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if ((0x100000001000L & l) != 0L && kind > 75)
                     kind = 75;
                  break;
               case 9:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 12:
                  if ((0x5000000050L & l) != 0L && kind > 79)
                     kind = 79;
                  break;
               case 14:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar == 92)
                     jjAddStates(30, 33);
                  break;
               case 17:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 22:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 28:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 92)
                     jjAddStates(34, 37);
                  break;
               case 30:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 36:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(42, 43);
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 75)
                     kind = 75;
                  jjCheckNAddTwoStates(60, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 42:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(42);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 28:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 62 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x800000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 21)
                     kind = 21;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   44, 45, 50, 51, 54, 55, 12, 28, 29, 31, 14, 16, 59, 61, 6, 8, 
   9, 12, 28, 29, 33, 31, 46, 47, 12, 54, 55, 12, 10, 11, 17, 18, 
   20, 22, 30, 32, 34, 36, 48, 49, 52, 53, 56, 57, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\157\160\164\151\157\156\163", "\114\117\117\113\101\110\105\101\104", 
"\111\107\116\117\122\105\137\103\101\123\105", "\120\101\122\123\105\122\137\102\105\107\111\116", 
"\120\101\122\123\105\122\137\105\116\104", "\112\101\126\101\103\117\104\105", "\124\117\113\105\116", 
"\123\120\105\103\111\101\114\137\124\117\113\105\116", "\115\117\122\105", "\123\113\111\120", 
"\124\117\113\105\116\137\115\107\122\137\104\105\103\114\123", "\105\117\106", null, null, null, null, null, null, null, null, null, null, 
null, null, "\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", 
"\142\162\145\141\153", "\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\164\141\164\151\143", "\163\165\160\145\162", 
"\163\167\151\164\143\150", "\163\171\156\143\150\162\157\156\151\172\145\144", "\164\150\151\163", 
"\164\150\162\157\167", "\164\150\162\157\167\163", "\164\162\141\156\163\151\145\156\164", 
"\164\162\165\145", "\164\162\171", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\73", "\54", "\56", "\75", "\76", "\74", 
"\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", 
"\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", "\43", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 0, 0, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffe001fffL, 0x7fffffffffce8fffL, 
};
static final long[] jjtoSkip = {
   0xe3e000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe00000L, 0x0L, 
};
static final long[] jjtoMore = {
   0x11c0000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[62];
private final int[] jjstateSet = new int[124];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JavaCCParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 62; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                   input_stream.backup(1);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
