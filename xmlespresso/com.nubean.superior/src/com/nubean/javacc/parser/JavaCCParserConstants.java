/* Generated By:JJTree&JavaCC: Do not edit this line. JavaCCParserConstants.java */
/*
The MIT License (MIT)

Copyright (c) 2015 NuBean LLC

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

package com.nubean.javacc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaCCParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int _OPTIONS = 1;
  /** RegularExpression Id. */
  int _LOOKAHEAD = 2;
  /** RegularExpression Id. */
  int _IGNORE_CASE = 3;
  /** RegularExpression Id. */
  int _PARSER_BEGIN = 4;
  /** RegularExpression Id. */
  int _PARSER_END = 5;
  /** RegularExpression Id. */
  int _JAVACODE = 6;
  /** RegularExpression Id. */
  int _TOKEN = 7;
  /** RegularExpression Id. */
  int _SPECIAL_TOKEN = 8;
  /** RegularExpression Id. */
  int _MORE = 9;
  /** RegularExpression Id. */
  int _SKIP = 10;
  /** RegularExpression Id. */
  int _TOKEN_MGR_DECLS = 11;
  /** RegularExpression Id. */
  int _EOF = 12;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 21;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 22;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 23;
  /** RegularExpression Id. */
  int ABSTRACT = 25;
  /** RegularExpression Id. */
  int BOOLEAN = 26;
  /** RegularExpression Id. */
  int BREAK = 27;
  /** RegularExpression Id. */
  int BYTE = 28;
  /** RegularExpression Id. */
  int CASE = 29;
  /** RegularExpression Id. */
  int CATCH = 30;
  /** RegularExpression Id. */
  int CHAR = 31;
  /** RegularExpression Id. */
  int CLASS = 32;
  /** RegularExpression Id. */
  int CONST = 33;
  /** RegularExpression Id. */
  int CONTINUE = 34;
  /** RegularExpression Id. */
  int _DEFAULT = 35;
  /** RegularExpression Id. */
  int DO = 36;
  /** RegularExpression Id. */
  int DOUBLE = 37;
  /** RegularExpression Id. */
  int ELSE = 38;
  /** RegularExpression Id. */
  int EXTENDS = 39;
  /** RegularExpression Id. */
  int FALSE = 40;
  /** RegularExpression Id. */
  int FINAL = 41;
  /** RegularExpression Id. */
  int FINALLY = 42;
  /** RegularExpression Id. */
  int FLOAT = 43;
  /** RegularExpression Id. */
  int FOR = 44;
  /** RegularExpression Id. */
  int GOTO = 45;
  /** RegularExpression Id. */
  int IF = 46;
  /** RegularExpression Id. */
  int IMPLEMENTS = 47;
  /** RegularExpression Id. */
  int IMPORT = 48;
  /** RegularExpression Id. */
  int INSTANCEOF = 49;
  /** RegularExpression Id. */
  int INT = 50;
  /** RegularExpression Id. */
  int INTERFACE = 51;
  /** RegularExpression Id. */
  int LONG = 52;
  /** RegularExpression Id. */
  int NATIVE = 53;
  /** RegularExpression Id. */
  int NEW = 54;
  /** RegularExpression Id. */
  int NULL = 55;
  /** RegularExpression Id. */
  int PACKAGE = 56;
  /** RegularExpression Id. */
  int PRIVATE = 57;
  /** RegularExpression Id. */
  int PROTECTED = 58;
  /** RegularExpression Id. */
  int PUBLIC = 59;
  /** RegularExpression Id. */
  int RETURN = 60;
  /** RegularExpression Id. */
  int SHORT = 61;
  /** RegularExpression Id. */
  int STATIC = 62;
  /** RegularExpression Id. */
  int SUPER = 63;
  /** RegularExpression Id. */
  int SWITCH = 64;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 65;
  /** RegularExpression Id. */
  int THIS = 66;
  /** RegularExpression Id. */
  int THROW = 67;
  /** RegularExpression Id. */
  int THROWS = 68;
  /** RegularExpression Id. */
  int TRANSIENT = 69;
  /** RegularExpression Id. */
  int TRUE = 70;
  /** RegularExpression Id. */
  int TRY = 71;
  /** RegularExpression Id. */
  int VOID = 72;
  /** RegularExpression Id. */
  int VOLATILE = 73;
  /** RegularExpression Id. */
  int WHILE = 74;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 75;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 76;
  /** RegularExpression Id. */
  int HEX_LITERAL = 77;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 78;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 79;
  /** RegularExpression Id. */
  int EXPONENT = 80;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 81;
  /** RegularExpression Id. */
  int STRING_LITERAL = 82;
  /** RegularExpression Id. */
  int IDENTIFIER = 83;
  /** RegularExpression Id. */
  int LETTER = 84;
  /** RegularExpression Id. */
  int DIGIT = 85;
  /** RegularExpression Id. */
  int LPAREN = 86;
  /** RegularExpression Id. */
  int RPAREN = 87;
  /** RegularExpression Id. */
  int LBRACE = 88;
  /** RegularExpression Id. */
  int RBRACE = 89;
  /** RegularExpression Id. */
  int LBRACKET = 90;
  /** RegularExpression Id. */
  int RBRACKET = 91;
  /** RegularExpression Id. */
  int SEMICOLON = 92;
  /** RegularExpression Id. */
  int COMMA = 93;
  /** RegularExpression Id. */
  int DOT = 94;
  /** RegularExpression Id. */
  int ASSIGN = 95;
  /** RegularExpression Id. */
  int GT = 96;
  /** RegularExpression Id. */
  int LT = 97;
  /** RegularExpression Id. */
  int BANG = 98;
  /** RegularExpression Id. */
  int TILDE = 99;
  /** RegularExpression Id. */
  int HOOK = 100;
  /** RegularExpression Id. */
  int COLON = 101;
  /** RegularExpression Id. */
  int EQ = 102;
  /** RegularExpression Id. */
  int LE = 103;
  /** RegularExpression Id. */
  int GE = 104;
  /** RegularExpression Id. */
  int NE = 105;
  /** RegularExpression Id. */
  int SC_OR = 106;
  /** RegularExpression Id. */
  int SC_AND = 107;
  /** RegularExpression Id. */
  int INCR = 108;
  /** RegularExpression Id. */
  int DECR = 109;
  /** RegularExpression Id. */
  int PLUS = 110;
  /** RegularExpression Id. */
  int MINUS = 111;
  /** RegularExpression Id. */
  int STAR = 112;
  /** RegularExpression Id. */
  int SLASH = 113;
  /** RegularExpression Id. */
  int BIT_AND = 114;
  /** RegularExpression Id. */
  int BIT_OR = 115;
  /** RegularExpression Id. */
  int XOR = 116;
  /** RegularExpression Id. */
  int REM = 117;
  /** RegularExpression Id. */
  int PLUSASSIGN = 118;
  /** RegularExpression Id. */
  int MINUSASSIGN = 119;
  /** RegularExpression Id. */
  int STARASSIGN = 120;
  /** RegularExpression Id. */
  int SLASHASSIGN = 121;
  /** RegularExpression Id. */
  int ANDASSIGN = 122;
  /** RegularExpression Id. */
  int ORASSIGN = 123;
  /** RegularExpression Id. */
  int XORASSIGN = 124;
  /** RegularExpression Id. */
  int REMASSIGN = 125;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"options\"",
    "\"LOOKAHEAD\"",
    "\"IGNORE_CASE\"",
    "\"PARSER_BEGIN\"",
    "\"PARSER_END\"",
    "\"JAVACODE\"",
    "\"TOKEN\"",
    "\"SPECIAL_TOKEN\"",
    "\"MORE\"",
    "\"SKIP\"",
    "\"TOKEN_MGR_DECLS\"",
    "\"EOF\"",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 19>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 24>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"super\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"this\"",
    "\"throw\"",
    "\"throws\"",
    "\"transient\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\"#\"",
  };

}
